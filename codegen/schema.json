{
    "ACL LOAD": {
        "summary": "Reload the ACLs from the configured ACL file",
        "complexity": "O(N). Where N is the number of configured users.",
        "since": "6.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "ACL SAVE": {
        "summary": "Save the current ACL rules in the configured ACL file",
        "complexity": "O(N). Where N is the number of configured users.",
        "since": "6.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "ACL LIST": {
        "summary": "List the current ACL rules in ACL config file format",
        "complexity": "O(N). Where N is the number of configured users.",
        "since": "6.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "ACL USERS": {
        "summary": "List the username of all the configured ACL rules",
        "complexity": "O(N). Where N is the number of configured users.",
        "since": "6.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "ACL GETUSER": {
        "summary": "Get the rules for a specific ACL user",
        "complexity": "O(N). Where N is the number of password, command and pattern rules that the user has.",
        "arguments": [
            {
                "name": "username",
                "schema": {
                    "title": "username",
                    "type": "string"
                }
            }
        ],
        "since": "6.0.0",
        "group": "server",
        "return": {}
    },
    "ACL SETUSER": {
        "summary": "Modify or create the rules for a specific ACL user",
        "complexity": "O(N). Where N is the number of rules provided.",
        "arguments": [
            {
                "name": "username",
                "schema": {
                    "title": "username",
                    "type": "string"
                }
            },
            {
                "name": "rule",
                "optional": true,
                "schema": {
                    "title": "rule",
                    "type": "array",
                    "items": {
                        "title": "rule",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "6.0.0",
        "group": "server",
        "return": {}
    },
    "ACL DELUSER": {
        "summary": "Remove the specified ACL users and the associated rules",
        "complexity": "O(1) amortized time considering the typical user.",
        "arguments": [
            {
                "name": "username",
                "schema": {
                    "title": "username",
                    "type": "array",
                    "items": {
                        "title": "username",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "6.0.0",
        "group": "server",
        "return": {}
    },
    "ACL CAT": {
        "summary": "List the ACL categories or the commands inside a category",
        "complexity": "O(1) since the categories and commands are a fixed set.",
        "arguments": [
            {
                "name": "categoryname",
                "optional": true,
                "schema": {
                    "title": "categoryname",
                    "type": "string"
                }
            }
        ],
        "since": "6.0.0",
        "group": "server",
        "return": {}
    },
    "ACL GENPASS": {
        "summary": "Generate a pseudorandom secure password to use for ACL users",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "bits",
                "optional": true,
                "schema": {
                    "title": "bits",
                    "type": "integer"
                }
            }
        ],
        "since": "6.0.0",
        "group": "server",
        "return": {}
    },
    "ACL WHOAMI": {
        "summary": "Return the name of the user associated to the current connection",
        "complexity": "O(1)",
        "since": "6.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "ACL LOG": {
        "summary": "List latest events denied because of ACLs in place",
        "complexity": "O(N) with N being the number of entries shown.",
        "arguments": [
            {
                "name": "count or RESET",
                "optional": true,
                "schema": {
                    "title": "count or RESET",
                    "type": "string"
                }
            }
        ],
        "since": "6.0.0",
        "group": "server",
        "return": {}
    },
    "ACL HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "since": "6.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "APPEND": {
        "summary": "Append a value to a key",
        "complexity": "O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "value",
                "schema": {
                    "title": "value",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "AUTH": {
        "summary": "Authenticate to the server",
        "arguments": [
            {
                "name": "username",
                "optional": true,
                "schema": {
                    "title": "username",
                    "type": "string"
                }
            },
            {
                "name": "password",
                "schema": {
                    "title": "password",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "connection",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "BGREWRITEAOF": {
        "summary": "Asynchronously rewrite the append-only file",
        "since": "1.0.0",
        "group": "server",
        "arguments": [],
        "return": {
            "type": "string"
        }
    },
    "BGSAVE": {
        "summary": "Asynchronously save the dataset to disk",
        "arguments": [
            {
                "name": "schedule",
                "optional": true,
                "schema": {
                    "title": "schedule",
                    "type": "string",
                    "enum": ["SCHEDULE"]
                }
            }
        ],
        "since": "1.0.0",
        "group": "server",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "BITCOUNT": {
        "summary": "Count set bits in a string",
        "complexity": "O(N)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "start, end",
                "optional": true,
                "schema": {
                    "title": "start, end",
                    "type": "array",
                    "items": [
                        {
                            "title": "start",
                            "type": "integer"
                        },
                        {
                            "title": "end",
                            "type": "integer"
                        }
                    ]
                }
            }
        ],
        "since": "2.6.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "BITFIELD": {
        "summary": "Perform arbitrary bitfield integer operations on strings",
        "complexity": "O(1) for each subcommand specified",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "GET",
                "optional": true,
                "schema": {
                    "title": "GET",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "GET"
                        },
                        {
                            "title": "type, offset",
                            "type": "array",
                            "items": [
                                {
                                    "title": "type",
                                    "type": "string"
                                },
                                {
                                    "title": "offset",
                                    "type": "integer"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "SET",
                "optional": true,
                "schema": {
                    "title": "SET",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "SET"
                        },
                        {
                            "title": "type, offset, value",
                            "type": "array",
                            "items": [
                                {
                                    "title": "type",
                                    "type": "string"
                                },
                                {
                                    "title": "offset",
                                    "type": "integer"
                                },
                                {
                                    "title": "value",
                                    "type": "integer"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "INCRBY",
                "optional": true,
                "schema": {
                    "title": "INCRBY",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "INCRBY"
                        },
                        {
                            "title": "type, offset, increment",
                            "type": "array",
                            "items": [
                                {
                                    "title": "type",
                                    "type": "string"
                                },
                                {
                                    "title": "offset",
                                    "type": "integer"
                                },
                                {
                                    "title": "increment",
                                    "type": "integer"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "OVERFLOW",
                "optional": true,
                "schema": {
                    "title": "OVERFLOW",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "OVERFLOW"
                        },
                        {
                            "title": "WRAP, SAT, or FAIL",
                            "type": "string",
                            "enum": ["WRAP", "SAT", "FAIL"]
                        }
                    ]
                }
            }
        ],
        "since": "3.2.0",
        "group": "string",
        "return": {}
    },
    "BITOP": {
        "summary": "Perform bitwise operations between strings",
        "complexity": "O(N)",
        "arguments": [
            {
                "name": "operation",
                "schema": {
                    "title": "operation",
                    "type": "string"
                }
            },
            {
                "name": "destkey",
                "schema": {
                    "title": "destkey",
                    "type": "string"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.6.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "BITPOS": {
        "summary": "Find first bit set or clear in a string",
        "complexity": "O(N)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "bit",
                "schema": {
                    "title": "bit",
                    "type": "integer"
                }
            },
            {
                "name": "start",
                "optional": true,
                "schema": {
                    "title": "start",
                    "type": "integer"
                }
            },
            {
                "name": "end",
                "optional": true,
                "schema": {
                    "title": "end",
                    "type": "integer"
                }
            }
        ],
        "since": "2.8.7",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "BLPOP": {
        "summary": "Remove and get the first element in a list, or block until one is available",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "timeout",
                "schema": {
                    "title": "timeout",
                    "type": "number"
                }
            }
        ],
        "since": "2.0.0",
        "group": "list",
        "return": {
            "anyOf": [
                {
                    "type": "array"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "BRPOP": {
        "summary": "Remove and get the last element in a list, or block until one is available",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "timeout",
                "schema": {
                    "title": "timeout",
                    "type": "number"
                }
            }
        ],
        "since": "2.0.0",
        "group": "list",
        "return": {
            "anyOf": [
                {
                    "type": "array"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "BRPOPLPUSH": {
        "summary": "Pop an element from a list, push it to another list and return it; or block until one is available",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "source",
                "schema": {
                    "title": "source",
                    "type": "string"
                }
            },
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            },
            {
                "name": "timeout",
                "schema": {
                    "title": "timeout",
                    "type": "number"
                }
            }
        ],
        "since": "2.2.0",
        "group": "list",
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "BLMOVE": {
        "summary": "Pop an element from a list, push it to another list and return it; or block until one is available",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "source",
                "schema": {
                    "title": "source",
                    "type": "string"
                }
            },
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            },
            {
                "name": "wherefrom",
                "schema": {
                    "title": "wherefrom",
                    "type": "string",
                    "enum": ["LEFT", "RIGHT"]
                }
            },
            {
                "name": "whereto",
                "schema": {
                    "title": "whereto",
                    "type": "string",
                    "enum": ["LEFT", "RIGHT"]
                }
            },
            {
                "name": "timeout",
                "schema": {
                    "title": "timeout",
                    "type": "number"
                }
            }
        ],
        "since": "6.2.0",
        "group": "list",
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "BZPOPMIN": {
        "summary": "Remove and return the member with the lowest score from one or more sorted sets, or block until one is available",
        "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "timeout",
                "schema": {
                    "title": "timeout",
                    "type": "number"
                }
            }
        ],
        "since": "5.0.0",
        "group": "sorted_set",
        "return": {
            "anyOf": [
                {
                    "type": "array"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "BZPOPMAX": {
        "summary": "Remove and return the member with the highest score from one or more sorted sets, or block until one is available",
        "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "timeout",
                "schema": {
                    "title": "timeout",
                    "type": "number"
                }
            }
        ],
        "since": "5.0.0",
        "group": "sorted_set",
        "return": {
            "anyOf": [
                {
                    "type": "array"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "CLIENT CACHING": {
        "summary": "Instruct the server about tracking or not keys in the next request",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "mode",
                "schema": {
                    "title": "mode",
                    "type": "string",
                    "enum": ["YES", "NO"]
                }
            }
        ],
        "since": "6.0.0",
        "group": "connection",
        "return": {}
    },
    "CLIENT ID": {
        "summary": "Returns the client ID for the current connection",
        "complexity": "O(1)",
        "since": "5.0.0",
        "group": "connection",
        "arguments": [],
        "return": {}
    },
    "CLIENT KILL": {
        "summary": "Kill the connection of a client",
        "complexity": "O(N) where N is the number of client connections",
        "arguments": [
            {
                "name": "ip:port",
                "optional": true,
                "schema": {
                    "title": "ip:port",
                    "type": "string"
                }
            },
            {
                "name": "ID",
                "optional": true,
                "schema": {
                    "title": "ID",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "ID"
                        },
                        {
                            "title": "client-id",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "TYPE",
                "optional": true,
                "schema": {
                    "title": "TYPE",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "TYPE"
                        },
                        {
                            "title": "normal, master, slave, or pubsub",
                            "type": "string",
                            "enum": ["normal", "master", "slave", "pubsub"]
                        }
                    ]
                }
            },
            {
                "name": "USER",
                "optional": true,
                "schema": {
                    "title": "USER",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "USER"
                        },
                        {
                            "title": "username",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "ADDR",
                "optional": true,
                "schema": {
                    "title": "ADDR",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "ADDR"
                        },
                        {
                            "title": "ip:port",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "SKIPME",
                "optional": true,
                "schema": {
                    "title": "SKIPME",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "SKIPME"
                        },
                        {
                            "title": "yes/no",
                            "type": "string"
                        }
                    ]
                }
            }
        ],
        "since": "2.4.0",
        "group": "connection",
        "return": {}
    },
    "CLIENT LIST": {
        "summary": "Get the list of client connections",
        "complexity": "O(N) where N is the number of client connections",
        "arguments": [
            {
                "name": "TYPE",
                "optional": true,
                "schema": {
                    "title": "TYPE",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "TYPE"
                        },
                        {
                            "title": "normal, master, replica, or pubsub",
                            "type": "string",
                            "enum": ["normal", "master", "replica", "pubsub"]
                        }
                    ]
                }
            }
        ],
        "since": "2.4.0",
        "group": "connection",
        "return": {}
    },
    "CLIENT GETNAME": {
        "summary": "Get the current connection name",
        "complexity": "O(1)",
        "since": "2.6.9",
        "group": "connection",
        "arguments": [],
        "return": {}
    },
    "CLIENT GETREDIR": {
        "summary": "Get tracking notifications redirection client ID if any",
        "complexity": "O(1)",
        "since": "6.0.0",
        "group": "connection",
        "arguments": [],
        "return": {}
    },
    "CLIENT PAUSE": {
        "summary": "Stop processing commands from clients for some time",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "timeout",
                "schema": {
                    "title": "timeout",
                    "type": "integer"
                }
            }
        ],
        "since": "2.9.50",
        "group": "connection",
        "return": {}
    },
    "CLIENT REPLY": {
        "summary": "Instruct the server whether to reply to commands",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "reply-mode",
                "schema": {
                    "title": "reply-mode",
                    "type": "string",
                    "enum": ["ON", "OFF", "SKIP"]
                }
            }
        ],
        "since": "3.2.0",
        "group": "connection",
        "return": {}
    },
    "CLIENT SETNAME": {
        "summary": "Set the current connection name",
        "complexity": "O(1)",
        "since": "2.6.9",
        "arguments": [
            {
                "name": "connection-name",
                "schema": {
                    "title": "connection-name",
                    "type": "string"
                }
            }
        ],
        "group": "connection",
        "return": {}
    },
    "CLIENT TRACKING": {
        "summary": "Enable or disable server assisted client side caching support",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "status",
                "schema": {
                    "title": "status",
                    "type": "string",
                    "enum": ["ON", "OFF"]
                }
            },
            {
                "name": "REDIRECT",
                "optional": true,
                "schema": {
                    "title": "REDIRECT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "REDIRECT"
                        },
                        {
                            "title": "client-id",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "PREFIX",
                "optional": true,
                "schema": {
                    "title": "PREFIX",
                    "type": "array",
                    "items": {
                        "title": "PREFIX",
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "const": "PREFIX"
                            },
                            {
                                "title": "prefix",
                                "type": "string"
                            }
                        ]
                    }
                }
            },
            {
                "name": "BCAST",
                "optional": true,
                "schema": {
                    "title": "BCAST",
                    "type": "string",
                    "enum": ["BCAST"]
                }
            },
            {
                "name": "OPTIN",
                "optional": true,
                "schema": {
                    "title": "OPTIN",
                    "type": "string",
                    "enum": ["OPTIN"]
                }
            },
            {
                "name": "OPTOUT",
                "optional": true,
                "schema": {
                    "title": "OPTOUT",
                    "type": "string",
                    "enum": ["OPTOUT"]
                }
            },
            {
                "name": "NOLOOP",
                "optional": true,
                "schema": {
                    "title": "NOLOOP",
                    "type": "string",
                    "enum": ["NOLOOP"]
                }
            }
        ],
        "since": "6.0.0",
        "group": "connection",
        "return": {}
    },
    "CLIENT UNBLOCK": {
        "summary": "Unblock a client blocked in a blocking command from a different connection",
        "complexity": "O(log N) where N is the number of client connections",
        "arguments": [
            {
                "name": "client-id",
                "schema": {
                    "title": "client-id",
                    "type": "integer"
                }
            },
            {
                "name": "unblock-type",
                "optional": true,
                "schema": {
                    "title": "unblock-type",
                    "type": "string",
                    "enum": ["TIMEOUT", "ERROR"]
                }
            }
        ],
        "since": "5.0.0",
        "group": "connection",
        "return": {}
    },
    "CLUSTER ADDSLOTS": {
        "summary": "Assign new hash slots to receiving node",
        "complexity": "O(N) where N is the total number of hash slot arguments",
        "arguments": [
            {
                "name": "slot",
                "schema": {
                    "title": "slot",
                    "type": "array",
                    "items": {
                        "title": "slot",
                        "type": "integer"
                    }
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER BUMPEPOCH": {
        "summary": "Advance the cluster config epoch",
        "complexity": "O(1)",
        "since": "3.0.0",
        "group": "cluster",
        "arguments": [],
        "return": {}
    },
    "CLUSTER COUNT-FAILURE-REPORTS": {
        "summary": "Return the number of failure reports active for a given node",
        "complexity": "O(N) where N is the number of failure reports",
        "arguments": [
            {
                "name": "node-id",
                "schema": {
                    "title": "node-id",
                    "type": "string"
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER COUNTKEYSINSLOT": {
        "summary": "Return the number of local keys in the specified hash slot",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "slot",
                "schema": {
                    "title": "slot",
                    "type": "integer"
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER DELSLOTS": {
        "summary": "Set hash slots as unbound in receiving node",
        "complexity": "O(N) where N is the total number of hash slot arguments",
        "arguments": [
            {
                "name": "slot",
                "schema": {
                    "title": "slot",
                    "type": "array",
                    "items": {
                        "title": "slot",
                        "type": "integer"
                    }
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER FAILOVER": {
        "summary": "Forces a replica to perform a manual failover of its master.",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "options",
                "optional": true,
                "schema": {
                    "title": "options",
                    "type": "string",
                    "enum": ["FORCE", "TAKEOVER"]
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER FLUSHSLOTS": {
        "summary": "Delete a node's own slots information",
        "complexity": "O(1)",
        "since": "3.0.0",
        "group": "cluster",
        "arguments": [],
        "return": {}
    },
    "CLUSTER FORGET": {
        "summary": "Remove a node from the nodes table",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "node-id",
                "schema": {
                    "title": "node-id",
                    "type": "string"
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER GETKEYSINSLOT": {
        "summary": "Return local key names in the specified hash slot",
        "complexity": "O(log(N)) where N is the number of requested keys",
        "arguments": [
            {
                "name": "slot",
                "schema": {
                    "title": "slot",
                    "type": "integer"
                }
            },
            {
                "name": "count",
                "schema": {
                    "title": "count",
                    "type": "integer"
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER INFO": {
        "summary": "Provides info about Redis Cluster node state",
        "complexity": "O(1)",
        "since": "3.0.0",
        "group": "cluster",
        "arguments": [],
        "return": {}
    },
    "CLUSTER KEYSLOT": {
        "summary": "Returns the hash slot of the specified key",
        "complexity": "O(N) where N is the number of bytes in the key",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER MEET": {
        "summary": "Force a node cluster to handshake with another node",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "ip",
                "schema": {
                    "title": "ip",
                    "type": "string"
                }
            },
            {
                "name": "port",
                "schema": {
                    "title": "port",
                    "type": "integer"
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER MYID": {
        "summary": "Return the node id",
        "complexity": "O(1)",
        "since": "3.0.0",
        "group": "cluster",
        "arguments": [],
        "return": {}
    },
    "CLUSTER NODES": {
        "summary": "Get Cluster config for the node",
        "complexity": "O(N) where N is the total number of Cluster nodes",
        "since": "3.0.0",
        "group": "cluster",
        "arguments": [],
        "return": {}
    },
    "CLUSTER REPLICATE": {
        "summary": "Reconfigure a node as a replica of the specified master node",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "node-id",
                "schema": {
                    "title": "node-id",
                    "type": "string"
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER RESET": {
        "summary": "Reset a Redis Cluster node",
        "complexity": "O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.",
        "arguments": [
            {
                "name": "reset-type",
                "optional": true,
                "schema": {
                    "title": "reset-type",
                    "type": "string",
                    "enum": ["HARD", "SOFT"]
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER SAVECONFIG": {
        "summary": "Forces the node to save cluster state on disk",
        "complexity": "O(1)",
        "since": "3.0.0",
        "group": "cluster",
        "arguments": [],
        "return": {}
    },
    "CLUSTER SET-CONFIG-EPOCH": {
        "summary": "Set the configuration epoch in a new node",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "config-epoch",
                "schema": {
                    "title": "config-epoch",
                    "type": "integer"
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER SETSLOT": {
        "summary": "Bind a hash slot to a specific node",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "slot",
                "schema": {
                    "title": "slot",
                    "type": "integer"
                }
            },
            {
                "name": "subcommand",
                "schema": {
                    "title": "subcommand",
                    "type": "string",
                    "enum": ["IMPORTING", "MIGRATING", "STABLE", "NODE"]
                }
            },
            {
                "name": "node-id",
                "optional": true,
                "schema": {
                    "title": "node-id",
                    "type": "string"
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER SLAVES": {
        "summary": "List replica nodes of the specified master node",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "node-id",
                "schema": {
                    "title": "node-id",
                    "type": "string"
                }
            }
        ],
        "since": "3.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER REPLICAS": {
        "summary": "List replica nodes of the specified master node",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "node-id",
                "schema": {
                    "title": "node-id",
                    "type": "string"
                }
            }
        ],
        "since": "5.0.0",
        "group": "cluster",
        "return": {}
    },
    "CLUSTER SLOTS": {
        "summary": "Get array of Cluster slot to node mappings",
        "complexity": "O(N) where N is the total number of Cluster nodes",
        "since": "3.0.0",
        "group": "cluster",
        "arguments": [],
        "return": {}
    },
    "COMMAND": {
        "summary": "Get array of Redis command details",
        "complexity": "O(N) where N is the total number of Redis commands",
        "since": "2.8.13",
        "group": "server",
        "arguments": [],
        "return": {
            "type": "array"
        }
    },
    "COMMAND COUNT": {
        "summary": "Get total number of Redis commands",
        "complexity": "O(1)",
        "since": "2.8.13",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "COMMAND GETKEYS": {
        "summary": "Extract keys given a full Redis command",
        "complexity": "O(N) where N is the number of arguments to the command",
        "since": "2.8.13",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "COMMAND INFO": {
        "summary": "Get array of specific Redis command details",
        "complexity": "O(N) when N is number of commands to look up",
        "since": "2.8.13",
        "arguments": [
            {
                "name": "command-name",
                "schema": {
                    "title": "command-name",
                    "type": "array",
                    "items": {
                        "title": "command-name",
                        "type": "string"
                    }
                }
            }
        ],
        "group": "server",
        "return": {}
    },
    "CONFIG GET": {
        "summary": "Get the value of a configuration parameter",
        "arguments": [
            {
                "name": "parameter",
                "schema": {
                    "title": "parameter",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "server",
        "return": {}
    },
    "CONFIG REWRITE": {
        "summary": "Rewrite the configuration file with the in memory configuration",
        "since": "2.8.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "CONFIG SET": {
        "summary": "Set a configuration parameter to the given value",
        "arguments": [
            {
                "name": "parameter",
                "schema": {
                    "title": "parameter",
                    "type": "string"
                }
            },
            {
                "name": "value",
                "schema": {
                    "title": "value",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "server",
        "return": {}
    },
    "CONFIG RESETSTAT": {
        "summary": "Reset the stats returned by INFO",
        "complexity": "O(1)",
        "since": "2.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "COPY": {
        "summary": "Copy a key",
        "complexity": "O(N) worst case for collections, where N is the number of nested items. O(1) for string values.",
        "since": "6.2.0",
        "arguments": [
            {
                "name": "source",
                "schema": {
                    "title": "source",
                    "type": "string"
                }
            },
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            },
            {
                "name": "DB",
                "optional": true,
                "schema": {
                    "title": "DB",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "DB"
                        },
                        {
                            "title": "destination-db",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "replace",
                "optional": true,
                "schema": {
                    "title": "replace",
                    "type": "string",
                    "enum": ["REPLACE"]
                }
            }
        ],
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "DBSIZE": {
        "summary": "Return the number of keys in the selected database",
        "since": "1.0.0",
        "group": "server",
        "arguments": [],
        "return": {
            "type": "integer"
        }
    },
    "DEBUG OBJECT": {
        "summary": "Get debugging information about a key",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "server",
        "return": {}
    },
    "DEBUG SEGFAULT": {
        "summary": "Make the server crash",
        "since": "1.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "DECR": {
        "summary": "Decrement the integer value of a key by one",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "DECRBY": {
        "summary": "Decrement the integer value of a key by the given number",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "decrement",
                "schema": {
                    "title": "decrement",
                    "type": "integer"
                }
            }
        ],
        "since": "1.0.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "DEL": {
        "summary": "Delete a key",
        "complexity": "O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "DISCARD": {
        "summary": "Discard all commands issued after MULTI",
        "since": "2.0.0",
        "group": "transactions",
        "arguments": [],
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "DUMP": {
        "summary": "Return a serialized version of the value stored at the specified key.",
        "complexity": "O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "2.6.0",
        "group": "generic",
        "return": {
            "type": "string"
        }
    },
    "ECHO": {
        "summary": "Echo the given string",
        "arguments": [
            {
                "name": "message",
                "schema": {
                    "title": "message",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "connection",
        "return": {
            "type": "string"
        }
    },
    "EVAL": {
        "summary": "Execute a Lua script server side",
        "complexity": "Depends on the script that is executed.",
        "arguments": [
            {
                "name": "script",
                "schema": {
                    "title": "script",
                    "type": "string"
                }
            },
            {
                "name": "numkeys",
                "schema": {
                    "title": "numkeys",
                    "type": "integer"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "arg",
                "schema": {
                    "title": "arg",
                    "type": "array",
                    "items": {
                        "title": "arg",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.6.0",
        "group": "scripting",
        "return": {}
    },
    "EVALSHA": {
        "summary": "Execute a Lua script server side",
        "complexity": "Depends on the script that is executed.",
        "arguments": [
            {
                "name": "sha1",
                "schema": {
                    "title": "sha1",
                    "type": "string"
                }
            },
            {
                "name": "numkeys",
                "schema": {
                    "title": "numkeys",
                    "type": "integer"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "arg",
                "schema": {
                    "title": "arg",
                    "type": "array",
                    "items": {
                        "title": "arg",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.6.0",
        "group": "scripting",
        "return": {}
    },
    "EXEC": {
        "summary": "Execute all commands issued after MULTI",
        "since": "1.2.0",
        "group": "transactions",
        "arguments": [],
        "return": {
            "anyOf": [
                {
                    "type": "array"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "EXISTS": {
        "summary": "Determine if a key exists",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "EXPIRE": {
        "summary": "Set a key's time to live in seconds",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "seconds",
                "schema": {
                    "title": "seconds",
                    "type": "integer"
                }
            }
        ],
        "since": "1.0.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "EXPIREAT": {
        "summary": "Set the expiration for a key as a UNIX timestamp",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "timestamp",
                "schema": {
                    "title": "timestamp"
                }
            }
        ],
        "since": "1.2.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "FLUSHALL": {
        "summary": "Remove all keys from all databases",
        "arguments": [
            {
                "name": "async",
                "optional": true,
                "schema": {
                    "title": "async",
                    "type": "string",
                    "enum": ["ASYNC"]
                }
            }
        ],
        "since": "1.0.0",
        "group": "server",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "FLUSHDB": {
        "summary": "Remove all keys from the current database",
        "arguments": [
            {
                "name": "async",
                "optional": true,
                "schema": {
                    "title": "async",
                    "type": "string",
                    "enum": ["ASYNC"]
                }
            }
        ],
        "since": "1.0.0",
        "group": "server",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "GEOADD": {
        "summary": "Add one or more geospatial items in the geospatial index represented using a sorted set",
        "complexity": "O(log(N)) for each item added, where N is the number of elements in the sorted set.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "longitude, latitude, member",
                "schema": {
                    "title": "longitude, latitude, member",
                    "type": "array",
                    "items": {
                        "title": "longitude, latitude, member",
                        "type": "array",
                        "items": [
                            {
                                "title": "longitude",
                                "type": "number"
                            },
                            {
                                "title": "latitude",
                                "type": "number"
                            },
                            {
                                "title": "member",
                                "type": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "since": "3.2.0",
        "group": "geo",
        "return": {
            "type": "integer"
        }
    },
    "GEOHASH": {
        "summary": "Returns members of a geospatial index as standard geohash strings",
        "complexity": "O(log(N)) for each member requested, where N is the number of elements in the sorted set.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "array",
                    "items": {
                        "title": "member",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "3.2.0",
        "group": "geo",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "GEOPOS": {
        "summary": "Returns longitude and latitude of members of a geospatial index",
        "complexity": "O(log(N)) for each member requested, where N is the number of elements in the sorted set.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "array",
                    "items": {
                        "title": "member",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "3.2.0",
        "group": "geo",
        "return": {
            "anyOf": [
                {
                    "type": "array"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "GEODIST": {
        "summary": "Returns the distance between two members of a geospatial index",
        "complexity": "O(log(N))",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member1",
                "schema": {
                    "title": "member1",
                    "type": "string"
                }
            },
            {
                "name": "member2",
                "schema": {
                    "title": "member2",
                    "type": "string"
                }
            },
            {
                "name": "unit",
                "optional": true,
                "schema": {
                    "title": "unit",
                    "type": "string",
                    "enum": ["m", "km", "ft", "mi"]
                }
            }
        ],
        "since": "3.2.0",
        "group": "geo",
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "GEORADIUS": {
        "summary": "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point",
        "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "longitude",
                "schema": {
                    "title": "longitude",
                    "type": "number"
                }
            },
            {
                "name": "latitude",
                "schema": {
                    "title": "latitude",
                    "type": "number"
                }
            },
            {
                "name": "radius",
                "schema": {
                    "title": "radius",
                    "type": "number"
                }
            },
            {
                "name": "unit",
                "schema": {
                    "title": "unit",
                    "type": "string",
                    "enum": ["m", "km", "ft", "mi"]
                }
            },
            {
                "name": "withcoord",
                "optional": true,
                "schema": {
                    "title": "withcoord",
                    "type": "string",
                    "enum": ["WITHCOORD"]
                }
            },
            {
                "name": "withdist",
                "optional": true,
                "schema": {
                    "title": "withdist",
                    "type": "string",
                    "enum": ["WITHDIST"]
                }
            },
            {
                "name": "withhash",
                "optional": true,
                "schema": {
                    "title": "withhash",
                    "type": "string",
                    "enum": ["WITHHASH"]
                }
            },
            {
                "name": "COUNT",
                "optional": true,
                "schema": {
                    "title": "COUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "COUNT"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "order",
                "optional": true,
                "schema": {
                    "title": "order",
                    "type": "string",
                    "enum": ["ASC", "DESC"]
                }
            },
            {
                "name": "STORE",
                "optional": true,
                "schema": {
                    "title": "STORE",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "STORE"
                        },
                        {
                            "title": "key",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "STOREDIST",
                "optional": true,
                "schema": {
                    "title": "STOREDIST",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "STOREDIST"
                        },
                        {
                            "title": "key",
                            "type": "string"
                        }
                    ]
                }
            }
        ],
        "since": "3.2.0",
        "group": "geo",
        "return": {
            "type": "array"
        }
    },
    "GEORADIUSBYMEMBER": {
        "summary": "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member",
        "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "string"
                }
            },
            {
                "name": "radius",
                "schema": {
                    "title": "radius",
                    "type": "number"
                }
            },
            {
                "name": "unit",
                "schema": {
                    "title": "unit",
                    "type": "string",
                    "enum": ["m", "km", "ft", "mi"]
                }
            },
            {
                "name": "withcoord",
                "optional": true,
                "schema": {
                    "title": "withcoord",
                    "type": "string",
                    "enum": ["WITHCOORD"]
                }
            },
            {
                "name": "withdist",
                "optional": true,
                "schema": {
                    "title": "withdist",
                    "type": "string",
                    "enum": ["WITHDIST"]
                }
            },
            {
                "name": "withhash",
                "optional": true,
                "schema": {
                    "title": "withhash",
                    "type": "string",
                    "enum": ["WITHHASH"]
                }
            },
            {
                "name": "COUNT",
                "optional": true,
                "schema": {
                    "title": "COUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "COUNT"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "order",
                "optional": true,
                "schema": {
                    "title": "order",
                    "type": "string",
                    "enum": ["ASC", "DESC"]
                }
            },
            {
                "name": "STORE",
                "optional": true,
                "schema": {
                    "title": "STORE",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "STORE"
                        },
                        {
                            "title": "key",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "STOREDIST",
                "optional": true,
                "schema": {
                    "title": "STOREDIST",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "STOREDIST"
                        },
                        {
                            "title": "key",
                            "type": "string"
                        }
                    ]
                }
            }
        ],
        "since": "3.2.0",
        "group": "geo",
        "return": {}
    },
    "GET": {
        "summary": "Get the value of a key",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "string",
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "GETBIT": {
        "summary": "Returns the bit value at offset in the string value stored at key",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "offset",
                "schema": {
                    "title": "offset",
                    "type": "integer"
                }
            }
        ],
        "since": "2.2.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "GETRANGE": {
        "summary": "Get a substring of the string stored at a key",
        "complexity": "O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "start",
                "schema": {
                    "title": "start",
                    "type": "integer"
                }
            },
            {
                "name": "end",
                "schema": {
                    "title": "end",
                    "type": "integer"
                }
            }
        ],
        "since": "2.4.0",
        "group": "string",
        "return": {
            "type": "string"
        }
    },
    "GETSET": {
        "summary": "Set the string value of a key and return its old value",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "value",
                "schema": {
                    "title": "value",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "string",
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "HDEL": {
        "summary": "Delete one or more hash fields",
        "complexity": "O(N) where N is the number of fields to be removed.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "field",
                "schema": {
                    "title": "field",
                    "type": "array",
                    "items": {
                        "title": "field",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "type": "integer"
        }
    },
    "HELLO": {
        "summary": "switch Redis protocol",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "protover",
                "schema": {
                    "title": "protover",
                    "type": "integer"
                }
            },
            {
                "name": "AUTH",
                "optional": true,
                "schema": {
                    "title": "AUTH",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "AUTH"
                        },
                        {
                            "title": "username, password",
                            "type": "array",
                            "items": [
                                {
                                    "title": "username",
                                    "type": "string"
                                },
                                {
                                    "title": "password",
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "SETNAME",
                "optional": true,
                "schema": {
                    "title": "SETNAME",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "SETNAME"
                        },
                        {
                            "title": "clientname",
                            "type": "string"
                        }
                    ]
                }
            }
        ],
        "since": "6.0.0",
        "group": "connection",
        "return": {
            "type": "array"
        }
    },
    "HEXISTS": {
        "summary": "Determine if a hash field exists",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "field",
                "schema": {
                    "title": "field",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "type": "integer"
        }
    },
    "HGET": {
        "summary": "Get the value of a hash field",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "field",
                "schema": {
                    "title": "field",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "HGETALL": {
        "summary": "Get all the fields and values in a hash",
        "complexity": "O(N) where N is the size of the hash.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "type": "array"
        }
    },
    "HINCRBY": {
        "summary": "Increment the integer value of a hash field by the given number",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "field",
                "schema": {
                    "title": "field",
                    "type": "string"
                }
            },
            {
                "name": "increment",
                "schema": {
                    "title": "increment",
                    "type": "integer"
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "type": "integer"
        }
    },
    "HINCRBYFLOAT": {
        "summary": "Increment the float value of a hash field by the given amount",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "field",
                "schema": {
                    "title": "field",
                    "type": "string"
                }
            },
            {
                "name": "increment",
                "schema": {
                    "title": "increment",
                    "type": "number"
                }
            }
        ],
        "since": "2.6.0",
        "group": "hash",
        "return": {
            "type": "string"
        }
    },
    "HKEYS": {
        "summary": "Get all the fields in a hash",
        "complexity": "O(N) where N is the size of the hash.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "HLEN": {
        "summary": "Get the number of fields in a hash",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "type": "integer"
        }
    },
    "HMGET": {
        "summary": "Get the values of all the given hash fields",
        "complexity": "O(N) where N is the number of fields being requested.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "field",
                "schema": {
                    "title": "field",
                    "type": "array",
                    "items": {
                        "title": "field",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "type": "array",
            "items": {
                "anyOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "null"
                    }
                ]
            }
        }
    },
    "HMSET": {
        "summary": "Set multiple hash fields to multiple values",
        "complexity": "O(N) where N is the number of fields being set.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "field, value",
                "schema": {
                    "title": "field, value",
                    "type": "array",
                    "items": {
                        "title": "field, value",
                        "type": "array",
                        "items": [
                            {
                                "title": "field",
                                "type": "string"
                            },
                            {
                                "title": "value",
                                "type": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "HSET": {
        "summary": "Set the string value of a hash field",
        "complexity": "O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "field, value",
                "schema": {
                    "title": "field, value",
                    "type": "array",
                    "items": {
                        "title": "field, value",
                        "type": "array",
                        "items": [
                            {
                                "title": "field",
                                "type": "string"
                            },
                            {
                                "title": "value",
                                "type": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "type": "integer"
        }
    },
    "HSETNX": {
        "summary": "Set the value of a hash field, only if the field does not exist",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "field",
                "schema": {
                    "title": "field",
                    "type": "string"
                }
            },
            {
                "name": "value",
                "schema": {
                    "title": "value",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "type": "integer"
        }
    },
    "HSTRLEN": {
        "summary": "Get the length of the value of a hash field",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "field",
                "schema": {
                    "title": "field",
                    "type": "string"
                }
            }
        ],
        "since": "3.2.0",
        "group": "hash",
        "return": {
            "type": "integer"
        }
    },
    "HVALS": {
        "summary": "Get all the values in a hash",
        "complexity": "O(N) where N is the size of the hash.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "hash",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "INCR": {
        "summary": "Increment the integer value of a key by one",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "INCRBY": {
        "summary": "Increment the integer value of a key by the given amount",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "increment",
                "schema": {
                    "title": "increment",
                    "type": "integer"
                }
            }
        ],
        "since": "1.0.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "INCRBYFLOAT": {
        "summary": "Increment the float value of a key by the given amount",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "increment",
                "schema": {
                    "title": "increment",
                    "type": "number"
                }
            }
        ],
        "since": "2.6.0",
        "group": "string",
        "return": {
            "type": "string"
        }
    },
    "INFO": {
        "summary": "Get information and statistics about the server",
        "arguments": [
            {
                "name": "section",
                "optional": true,
                "schema": {
                    "title": "section",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "server",
        "return": {
            "type": "string"
        }
    },
    "LOLWUT": {
        "summary": "Display some computer art and the Redis version",
        "arguments": [
            {
                "name": "VERSION",
                "optional": true,
                "schema": {
                    "title": "VERSION",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "VERSION"
                        },
                        {
                            "title": "version",
                            "type": "integer"
                        }
                    ]
                }
            }
        ],
        "since": "5.0.0",
        "group": "server",
        "return": {
            "type": "string"
        }
    },
    "KEYS": {
        "summary": "Find all keys matching the given pattern",
        "complexity": "O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.",
        "arguments": [
            {
                "name": "pattern",
                "schema": {
                    "title": "pattern",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "generic",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "LASTSAVE": {
        "summary": "Get the UNIX time stamp of the last successful save to disk",
        "since": "1.0.0",
        "group": "server",
        "arguments": [],
        "return": {
            "type": "integer"
        }
    },
    "LINDEX": {
        "summary": "Get an element from a list by its index",
        "complexity": "O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "index",
                "schema": {
                    "title": "index",
                    "type": "integer"
                }
            }
        ],
        "since": "1.0.0",
        "group": "list",
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "LINSERT": {
        "summary": "Insert an element before or after another element in a list",
        "complexity": "O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "where",
                "schema": {
                    "title": "where",
                    "type": "string",
                    "enum": ["BEFORE", "AFTER"]
                }
            },
            {
                "name": "pivot",
                "schema": {
                    "title": "pivot",
                    "type": "string"
                }
            },
            {
                "name": "element",
                "schema": {
                    "title": "element",
                    "type": "string"
                }
            }
        ],
        "since": "2.2.0",
        "group": "list",
        "return": {
            "type": "integer"
        }
    },
    "LLEN": {
        "summary": "Get the length of a list",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "list",
        "return": {
            "type": "integer"
        }
    },
    "LPOP": {
        "summary": "Remove and get the first element in a list",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "list",
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "LPOS": {
        "summary": "Return the index of matching elements on a list",
        "complexity": "O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "element",
                "schema": {
                    "title": "element",
                    "type": "string"
                }
            },
            {
                "name": "RANK",
                "optional": true,
                "schema": {
                    "title": "RANK",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "RANK"
                        },
                        {
                            "title": "rank",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "COUNT",
                "optional": true,
                "schema": {
                    "title": "COUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "COUNT"
                        },
                        {
                            "title": "num-matches",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "MAXLEN",
                "optional": true,
                "schema": {
                    "title": "MAXLEN",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "MAXLEN"
                        },
                        {
                            "title": "len",
                            "type": "integer"
                        }
                    ]
                }
            }
        ],
        "since": "6.0.6",
        "group": "list",
        "return": {}
    },
    "LPUSH": {
        "summary": "Prepend one or multiple elements to a list",
        "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "element",
                "schema": {
                    "title": "element",
                    "type": "array",
                    "items": {
                        "title": "element",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "list",
        "return": {
            "type": "integer"
        }
    },
    "LPUSHX": {
        "summary": "Prepend an element to a list, only if the list exists",
        "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "element",
                "schema": {
                    "title": "element",
                    "type": "array",
                    "items": {
                        "title": "element",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.2.0",
        "group": "list",
        "return": {
            "type": "integer"
        }
    },
    "LRANGE": {
        "summary": "Get a range of elements from a list",
        "complexity": "O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "start",
                "schema": {
                    "title": "start",
                    "type": "integer"
                }
            },
            {
                "name": "stop",
                "schema": {
                    "title": "stop",
                    "type": "integer"
                }
            }
        ],
        "since": "1.0.0",
        "group": "list",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "LREM": {
        "summary": "Remove elements from a list",
        "complexity": "O(N+M) where N is the length of the list and M is the number of elements removed.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "count",
                "schema": {
                    "title": "count",
                    "type": "integer"
                }
            },
            {
                "name": "element",
                "schema": {
                    "title": "element",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "list",
        "return": {
            "type": "integer"
        }
    },
    "LSET": {
        "summary": "Set the value of an element in a list by its index",
        "complexity": "O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "index",
                "schema": {
                    "title": "index",
                    "type": "integer"
                }
            },
            {
                "name": "element",
                "schema": {
                    "title": "element",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "list",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "LTRIM": {
        "summary": "Trim a list to the specified range",
        "complexity": "O(N) where N is the number of elements to be removed by the operation.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "start",
                "schema": {
                    "title": "start",
                    "type": "integer"
                }
            },
            {
                "name": "stop",
                "schema": {
                    "title": "stop",
                    "type": "integer"
                }
            }
        ],
        "since": "1.0.0",
        "group": "list",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "MEMORY DOCTOR": {
        "summary": "Outputs memory problems report",
        "since": "4.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "MEMORY HELP": {
        "summary": "Show helpful text about the different subcommands",
        "since": "4.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "MEMORY MALLOC-STATS": {
        "summary": "Show allocator internal stats",
        "since": "4.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "MEMORY PURGE": {
        "summary": "Ask the allocator to release memory",
        "since": "4.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "MEMORY STATS": {
        "summary": "Show memory usage details",
        "since": "4.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "MEMORY USAGE": {
        "summary": "Estimate the memory usage of a key",
        "complexity": "O(N) where N is the number of samples.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "SAMPLES",
                "optional": true,
                "schema": {
                    "title": "SAMPLES",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "SAMPLES"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            }
        ],
        "since": "4.0.0",
        "group": "server",
        "return": {}
    },
    "MGET": {
        "summary": "Get the values of all the given keys",
        "complexity": "O(N) where N is the number of keys to retrieve.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "string",
        "return": {
            "type": "array",
            "items": {
                "anyOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "null"
                    }
                ]
            }
        }
    },
    "MIGRATE": {
        "summary": "Atomically transfer a key from a Redis instance to another one.",
        "complexity": "This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.",
        "arguments": [
            {
                "name": "host",
                "schema": {
                    "title": "host",
                    "type": "string"
                }
            },
            {
                "name": "port",
                "schema": {
                    "title": "port",
                    "type": "string"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string",
                    "enum": ["key", "\"\""]
                }
            },
            {
                "name": "destination-db",
                "schema": {
                    "title": "destination-db",
                    "type": "integer"
                }
            },
            {
                "name": "timeout",
                "schema": {
                    "title": "timeout",
                    "type": "integer"
                }
            },
            {
                "name": "copy",
                "optional": true,
                "schema": {
                    "title": "copy",
                    "type": "string",
                    "enum": ["COPY"]
                }
            },
            {
                "name": "replace",
                "optional": true,
                "schema": {
                    "title": "replace",
                    "type": "string",
                    "enum": ["REPLACE"]
                }
            },
            {
                "name": "AUTH",
                "optional": true,
                "schema": {
                    "title": "AUTH",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "AUTH"
                        },
                        {
                            "title": "password",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "AUTH2",
                "optional": true,
                "schema": {
                    "title": "AUTH2",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "AUTH2"
                        },
                        {
                            "title": "username password",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "KEYS",
                "optional": true,
                "schema": {
                    "title": "KEYS",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "enum": ["KEYS"]
                        },
                        {
                            "type": "array",
                            "items": {
                                "title": "key",
                                "type": "string"
                            }
                        }
                    ]
                }
            }
        ],
        "since": "2.6.0",
        "group": "generic",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "MODULE LIST": {
        "summary": "List all modules loaded by the server",
        "complexity": "O(N) where N is the number of loaded modules.",
        "since": "4.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "MODULE LOAD": {
        "summary": "Load a module",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "path",
                "schema": {
                    "title": "path",
                    "type": "string"
                }
            },
            {
                "name": "arg",
                "optional": true,
                "schema": {
                    "title": "arg",
                    "type": "array",
                    "items": {
                        "title": "arg",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "4.0.0",
        "group": "server",
        "return": {}
    },
    "MODULE UNLOAD": {
        "summary": "Unload a module",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "name",
                "schema": {
                    "title": "name",
                    "type": "string"
                }
            }
        ],
        "since": "4.0.0",
        "group": "server",
        "return": {}
    },
    "MONITOR": {
        "summary": "Listen for all requests received by the server in real time",
        "since": "1.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "MOVE": {
        "summary": "Move a key to another database",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "db",
                "schema": {
                    "title": "db",
                    "type": "integer"
                }
            }
        ],
        "since": "1.0.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "MSET": {
        "summary": "Set multiple keys to multiple values",
        "complexity": "O(N) where N is the number of keys to set.",
        "arguments": [
            {
                "name": "key, value",
                "schema": {
                    "title": "key, value",
                    "type": "array",
                    "items": {
                        "title": "key, value",
                        "type": "array",
                        "items": [
                            {
                                "title": "key",
                                "type": "string"
                            },
                            {
                                "title": "value",
                                "type": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "since": "1.0.1",
        "group": "string",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "MSETNX": {
        "summary": "Set multiple keys to multiple values, only if none of the keys exist",
        "complexity": "O(N) where N is the number of keys to set.",
        "arguments": [
            {
                "name": "key, value",
                "schema": {
                    "title": "key, value",
                    "type": "array",
                    "items": {
                        "title": "key, value",
                        "type": "array",
                        "items": [
                            {
                                "title": "key",
                                "type": "string"
                            },
                            {
                                "title": "value",
                                "type": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "since": "1.0.1",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "MULTI": {
        "summary": "Mark the start of a transaction block",
        "since": "1.2.0",
        "group": "transactions",
        "arguments": [],
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "OBJECT": {
        "summary": "Inspect the internals of Redis objects",
        "complexity": "O(1) for all the currently implemented subcommands.",
        "since": "2.2.3",
        "group": "generic",
        "arguments": [
            {
                "name": "subcommand",
                "schema": {
                    "title": "subcommand",
                    "type": "string"
                }
            },
            {
                "name": "arguments",
                "optional": true,
                "schema": {
                    "title": "arguments",
                    "type": "array",
                    "items": {
                        "title": "arguments",
                        "type": "string"
                    }
                }
            }
        ],
        "return": {}
    },
    "PERSIST": {
        "summary": "Remove the expiration from a key",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "2.2.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "PEXPIRE": {
        "summary": "Set a key's time to live in milliseconds",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "milliseconds",
                "schema": {
                    "title": "milliseconds",
                    "type": "integer"
                }
            }
        ],
        "since": "2.6.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "PEXPIREAT": {
        "summary": "Set the expiration for a key as a UNIX timestamp specified in milliseconds",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "milliseconds-timestamp",
                "schema": {
                    "title": "milliseconds-timestamp"
                }
            }
        ],
        "since": "2.6.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "PFADD": {
        "summary": "Adds the specified elements to the specified HyperLogLog.",
        "complexity": "O(1) to add every element.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "element",
                "schema": {
                    "title": "element",
                    "type": "array",
                    "items": {
                        "title": "element",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.8.9",
        "group": "hyperloglog",
        "return": {
            "type": "integer"
        }
    },
    "PFCOUNT": {
        "summary": "Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",
        "complexity": "O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.8.9",
        "group": "hyperloglog",
        "return": {
            "type": "integer"
        }
    },
    "PFMERGE": {
        "summary": "Merge N different HyperLogLogs into a single one.",
        "complexity": "O(N) to merge N HyperLogLogs, but with high constant times.",
        "arguments": [
            {
                "name": "destkey",
                "schema": {
                    "title": "destkey",
                    "type": "string"
                }
            },
            {
                "name": "sourcekey",
                "schema": {
                    "title": "sourcekey",
                    "type": "array",
                    "items": {
                        "title": "sourcekey",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.8.9",
        "group": "hyperloglog",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "PING": {
        "summary": "Ping the server",
        "arguments": [
            {
                "name": "message",
                "optional": true,
                "schema": {
                    "title": "message",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "connection",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "PSETEX": {
        "summary": "Set the value and expiration in milliseconds of a key",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "milliseconds",
                "schema": {
                    "title": "milliseconds",
                    "type": "integer"
                }
            },
            {
                "name": "value",
                "schema": {
                    "title": "value",
                    "type": "string"
                }
            }
        ],
        "since": "2.6.0",
        "group": "string",
        "return": {}
    },
    "PSUBSCRIBE": {
        "summary": "Listen for messages published to channels matching the given patterns",
        "complexity": "O(N) where N is the number of patterns the client is already subscribed to.",
        "arguments": [
            {
                "name": "pattern",
                "schema": {
                    "title": "pattern",
                    "type": "array",
                    "items": {
                        "title": "pattern",
                        "type": "array",
                        "items": [
                            {
                                "title": "pattern",
                                "type": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "since": "2.0.0",
        "group": "pubsub",
        "return": {}
    },
    "PUBSUB": {
        "summary": "Inspect the state of the Pub/Sub subsystem",
        "complexity": "O(N) for the CHANNELS subcommand, where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns). O(N) for the NUMSUB subcommand, where N is the number of requested channels. O(1) for the NUMPAT subcommand.",
        "arguments": [
            {
                "name": "subcommand",
                "schema": {
                    "title": "subcommand",
                    "type": "string"
                }
            },
            {
                "name": "argument",
                "optional": true,
                "schema": {
                    "title": "argument",
                    "type": "array",
                    "items": {
                        "title": "argument",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.8.0",
        "group": "pubsub",
        "return": {
            "type": "array"
        }
    },
    "PTTL": {
        "summary": "Get the time to live for a key in milliseconds",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "2.6.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "PUBLISH": {
        "summary": "Post a message to a channel",
        "complexity": "O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).",
        "arguments": [
            {
                "name": "channel",
                "schema": {
                    "title": "channel",
                    "type": "string"
                }
            },
            {
                "name": "message",
                "schema": {
                    "title": "message",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "pubsub",
        "return": {
            "type": "integer"
        }
    },
    "PUNSUBSCRIBE": {
        "summary": "Stop listening for messages posted to channels matching the given patterns",
        "complexity": "O(N+M) where N is the number of patterns the client is already subscribed and M is the number of total patterns subscribed in the system (by any client).",
        "arguments": [
            {
                "name": "pattern",
                "optional": true,
                "schema": {
                    "title": "pattern",
                    "type": "array",
                    "items": {
                        "title": "pattern",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.0.0",
        "group": "pubsub",
        "return": {}
    },
    "QUIT": {
        "summary": "Close the connection",
        "since": "1.0.0",
        "group": "connection",
        "arguments": [],
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "RANDOMKEY": {
        "summary": "Return a random key from the keyspace",
        "complexity": "O(1)",
        "since": "1.0.0",
        "group": "generic",
        "arguments": [],
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "READONLY": {
        "summary": "Enables read queries for a connection to a cluster replica node",
        "complexity": "O(1)",
        "since": "3.0.0",
        "group": "cluster",
        "arguments": [],
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "READWRITE": {
        "summary": "Disables read queries for a connection to a cluster replica node",
        "complexity": "O(1)",
        "since": "3.0.0",
        "group": "cluster",
        "arguments": [],
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "RENAME": {
        "summary": "Rename a key",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "newkey",
                "schema": {
                    "title": "newkey",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "generic",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "RENAMENX": {
        "summary": "Rename a key, only if the new key does not exist",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "newkey",
                "schema": {
                    "title": "newkey",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "RESET": {
        "summary": "Reset the connection",
        "since": "6.2",
        "group": "connection",
        "arguments": [],
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "RESTORE": {
        "summary": "Create a key using the provided serialized value, previously obtained using DUMP.",
        "complexity": "O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "ttl",
                "schema": {
                    "title": "ttl",
                    "type": "integer"
                }
            },
            {
                "name": "serialized-value",
                "schema": {
                    "title": "serialized-value",
                    "type": "string"
                }
            },
            {
                "name": "replace",
                "optional": true,
                "schema": {
                    "title": "replace",
                    "type": "string",
                    "enum": ["REPLACE"]
                }
            },
            {
                "name": "absttl",
                "optional": true,
                "schema": {
                    "title": "absttl",
                    "type": "string",
                    "enum": ["ABSTTL"]
                }
            },
            {
                "name": "IDLETIME",
                "optional": true,
                "schema": {
                    "title": "IDLETIME",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "IDLETIME"
                        },
                        {
                            "title": "seconds",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "FREQ",
                "optional": true,
                "schema": {
                    "title": "FREQ",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "FREQ"
                        },
                        {
                            "title": "frequency",
                            "type": "integer"
                        }
                    ]
                }
            }
        ],
        "since": "2.6.0",
        "group": "generic",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "ROLE": {
        "summary": "Return the role of the instance in the context of replication",
        "since": "2.8.12",
        "group": "server",
        "arguments": [],
        "return": {
            "type": "array"
        }
    },
    "RPOP": {
        "summary": "Remove and get the last element in a list",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "list",
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "RPOPLPUSH": {
        "summary": "Remove the last element in a list, prepend it to another list and return it",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "source",
                "schema": {
                    "title": "source",
                    "type": "string"
                }
            },
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            }
        ],
        "since": "1.2.0",
        "group": "list",
        "return": {
            "type": "string"
        }
    },
    "LMOVE": {
        "summary": "Pop an element from a list, push it to another list and return it",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "source",
                "schema": {
                    "title": "source",
                    "type": "string"
                }
            },
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            },
            {
                "name": "wherefrom",
                "schema": {
                    "title": "wherefrom",
                    "type": "string",
                    "enum": ["LEFT", "RIGHT"]
                }
            },
            {
                "name": "whereto",
                "schema": {
                    "title": "whereto",
                    "type": "string",
                    "enum": ["LEFT", "RIGHT"]
                }
            }
        ],
        "since": "6.2.0",
        "group": "list",
        "return": {
            "type": "string"
        }
    },
    "RPUSH": {
        "summary": "Append one or multiple elements to a list",
        "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "element",
                "schema": {
                    "title": "element",
                    "type": "array",
                    "items": {
                        "title": "element",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "list",
        "return": {
            "type": "integer"
        }
    },
    "RPUSHX": {
        "summary": "Append an element to a list, only if the list exists",
        "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "element",
                "schema": {
                    "title": "element",
                    "type": "array",
                    "items": {
                        "title": "element",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.2.0",
        "group": "list",
        "return": {
            "type": "integer"
        }
    },
    "SADD": {
        "summary": "Add one or more members to a set",
        "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "array",
                    "items": {
                        "title": "member",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "integer"
        }
    },
    "SAVE": {
        "summary": "Synchronously save the dataset to disk",
        "since": "1.0.0",
        "group": "server",
        "arguments": [],
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "SCARD": {
        "summary": "Get the number of members in a set",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "integer"
        }
    },
    "SCRIPT DEBUG": {
        "summary": "Set the debug mode for executed scripts.",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "mode",
                "schema": {
                    "title": "mode",
                    "type": "string",
                    "enum": ["YES", "SYNC", "NO"]
                }
            }
        ],
        "since": "3.2.0",
        "group": "scripting",
        "return": {}
    },
    "SCRIPT EXISTS": {
        "summary": "Check existence of scripts in the script cache.",
        "complexity": "O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).",
        "arguments": [
            {
                "name": "sha1",
                "schema": {
                    "title": "sha1",
                    "type": "array",
                    "items": {
                        "title": "sha1",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.6.0",
        "group": "scripting",
        "return": {}
    },
    "SCRIPT FLUSH": {
        "summary": "Remove all the scripts from the script cache.",
        "complexity": "O(N) with N being the number of scripts in cache",
        "since": "2.6.0",
        "group": "scripting",
        "arguments": [],
        "return": {}
    },
    "SCRIPT KILL": {
        "summary": "Kill the script currently in execution.",
        "complexity": "O(1)",
        "since": "2.6.0",
        "group": "scripting",
        "arguments": [],
        "return": {}
    },
    "SCRIPT LOAD": {
        "summary": "Load the specified Lua script into the script cache.",
        "complexity": "O(N) with N being the length in bytes of the script body.",
        "arguments": [
            {
                "name": "script",
                "schema": {
                    "title": "script",
                    "type": "string"
                }
            }
        ],
        "since": "2.6.0",
        "group": "scripting",
        "return": {}
    },
    "SDIFF": {
        "summary": "Subtract multiple sets",
        "complexity": "O(N) where N is the total number of elements in all given sets.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "SDIFFSTORE": {
        "summary": "Subtract multiple sets and store the resulting set in a key",
        "complexity": "O(N) where N is the total number of elements in all given sets.",
        "arguments": [
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "integer"
        }
    },
    "SELECT": {
        "summary": "Change the selected database for the current connection",
        "arguments": [
            {
                "name": "index",
                "schema": {
                    "title": "index",
                    "type": "integer"
                }
            }
        ],
        "since": "1.0.0",
        "group": "connection",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "SET": {
        "summary": "Set the string value of a key",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "value",
                "schema": {
                    "title": "value",
                    "type": "string"
                }
            },
            {
                "name": "expiration",
                "optional": true,
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "type": "string",
                                    "enum": ["EX", "PX"]
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        },
                        {
                            "type": "string",
                            "const": "KEEPTTL"
                        }
                    ]
                }
            },
            {
                "name": "condition",
                "optional": true,
                "schema": {
                    "title": "condition",
                    "type": "string",
                    "enum": ["NX", "XX"]
                }
            },
            {
                "name": "get",
                "optional": true,
                "schema": {
                    "title": "get",
                    "type": "string",
                    "enum": ["GET"]
                }
            }
        ],
        "since": "1.0.0",
        "group": "string",
        "return": {
            "anyOf": [
                {
                    "type": "string",
                    "const": "OK"
                },
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "SETBIT": {
        "summary": "Sets or clears the bit at offset in the string value stored at key",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "offset",
                "schema": {
                    "title": "offset",
                    "type": "integer"
                }
            },
            {
                "name": "value",
                "schema": {
                    "title": "value",
                    "type": "integer"
                }
            }
        ],
        "since": "2.2.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "SETEX": {
        "summary": "Set the value and expiration of a key",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "seconds",
                "schema": {
                    "title": "seconds",
                    "type": "integer"
                }
            },
            {
                "name": "value",
                "schema": {
                    "title": "value",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "string",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "SETNX": {
        "summary": "Set the value of a key, only if the key does not exist",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "value",
                "schema": {
                    "title": "value",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "SETRANGE": {
        "summary": "Overwrite part of a string at key starting at the specified offset",
        "complexity": "O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "offset",
                "schema": {
                    "title": "offset",
                    "type": "integer"
                }
            },
            {
                "name": "value",
                "schema": {
                    "title": "value",
                    "type": "string"
                }
            }
        ],
        "since": "2.2.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "SHUTDOWN": {
        "summary": "Synchronously save the dataset to disk and then shut down the server",
        "arguments": [
            {
                "name": "save-mode",
                "optional": true,
                "schema": {
                    "title": "save-mode",
                    "type": "string",
                    "enum": ["NOSAVE", "SAVE"]
                }
            }
        ],
        "since": "1.0.0",
        "group": "server",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "SINTER": {
        "summary": "Intersect multiple sets",
        "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "SINTERSTORE": {
        "summary": "Intersect multiple sets and store the resulting set in a key",
        "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
        "arguments": [
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "integer"
        }
    },
    "SISMEMBER": {
        "summary": "Determine if a given value is a member of a set",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "integer"
        }
    },
    "SMISMEMBER": {
        "summary": "Returns the membership associated with the given elements for a set",
        "complexity": "O(N) where N is the number of elements being checked for membership",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "array",
                    "items": {
                        "title": "member",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "6.2.0",
        "group": "set",
        "return": {
            "type": "array"
        }
    },
    "SLAVEOF": {
        "summary": "Make the server a replica of another instance, or promote it as master. Deprecated starting with Redis 5. Use REPLICAOF instead.",
        "arguments": [
            {
                "name": "host",
                "schema": {
                    "title": "host",
                    "type": "string"
                }
            },
            {
                "name": "port",
                "schema": {
                    "title": "port",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "server",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "REPLICAOF": {
        "summary": "Make the server a replica of another instance, or promote it as master.",
        "arguments": [
            {
                "name": "host",
                "schema": {
                    "title": "host",
                    "type": "string"
                }
            },
            {
                "name": "port",
                "schema": {
                    "title": "port",
                    "type": "string"
                }
            }
        ],
        "since": "5.0.0",
        "group": "server",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "SLOWLOG": {
        "summary": "Manages the Redis slow queries log",
        "arguments": [
            {
                "name": "subcommand",
                "schema": {
                    "title": "subcommand",
                    "type": "string"
                }
            },
            {
                "name": "argument",
                "optional": true,
                "schema": {
                    "title": "argument",
                    "type": "string"
                }
            }
        ],
        "since": "2.2.12",
        "group": "server",
        "return": {}
    },
    "SMEMBERS": {
        "summary": "Get all the members in a set",
        "complexity": "O(N) where N is the set cardinality.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "SMOVE": {
        "summary": "Move a member from one set to another",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "source",
                "schema": {
                    "title": "source",
                    "type": "string"
                }
            },
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "integer"
        }
    },
    "SORT": {
        "summary": "Sort the elements in a list, set or sorted set",
        "complexity": "O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is currently O(N) as there is a copy step that will be avoided in next releases.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "BY",
                "optional": true,
                "schema": {
                    "title": "BY",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "BY"
                        },
                        {
                            "title": "pattern",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "LIMIT",
                "optional": true,
                "schema": {
                    "title": "LIMIT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "LIMIT"
                        },
                        {
                            "title": "offset, count",
                            "type": "array",
                            "items": [
                                {
                                    "title": "offset",
                                    "type": "integer"
                                },
                                {
                                    "title": "count",
                                    "type": "integer"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "GET",
                "optional": true,
                "schema": {
                    "title": "GET",
                    "type": "array",
                    "items": {
                        "title": "GET",
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "const": "GET"
                            },
                            {
                                "title": "pattern",
                                "type": "string"
                            }
                        ]
                    }
                }
            },
            {
                "name": "order",
                "optional": true,
                "schema": {
                    "title": "order",
                    "type": "string",
                    "enum": ["ASC", "DESC"]
                }
            },
            {
                "name": "sorting",
                "optional": true,
                "schema": {
                    "title": "sorting",
                    "type": "string",
                    "enum": ["ALPHA"]
                }
            },
            {
                "name": "STORE",
                "optional": true,
                "schema": {
                    "title": "STORE",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "STORE"
                        },
                        {
                            "title": "destination",
                            "type": "string"
                        }
                    ]
                }
            }
        ],
        "since": "1.0.0",
        "group": "generic",
        "return": {
            "anyOf": [
                {
                    "type": "integer"
                },
                {
                    "type": "array"
                }
            ]
        }
    },
    "SPOP": {
        "summary": "Remove and return one or multiple random members from a set",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "count",
                "optional": true,
                "schema": {
                    "title": "count",
                    "type": "integer"
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "anyOf": [
                {
                    "type": "null"
                },
                {
                    "type": "string"
                },
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        }
    },
    "SRANDMEMBER": {
        "summary": "Get one or multiple random members from a set",
        "complexity": "Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "count",
                "optional": true,
                "schema": {
                    "title": "count",
                    "type": "integer"
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "array"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "SREM": {
        "summary": "Remove one or more members from a set",
        "complexity": "O(N) where N is the number of members to be removed.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "array",
                    "items": {
                        "title": "member",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "integer"
        }
    },
    "STRALGO": {
        "summary": "Run algorithms (currently LCS) against strings",
        "complexity": "For LCS O(strlen(s1)*strlen(s2))",
        "arguments": [
            {
                "name": "algorithm",
                "schema": {
                    "title": "algorithm",
                    "type": "string",
                    "enum": ["LCS"]
                }
            },
            {
                "name": "algo-specific-argument",
                "schema": {
                    "title": "algo-specific-argument",
                    "type": "array",
                    "items": {
                        "title": "algo-specific-argument",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "6.0.0",
        "group": "string",
        "return": {}
    },
    "STRLEN": {
        "summary": "Get the length of the value stored in a key",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "2.2.0",
        "group": "string",
        "return": {
            "type": "integer"
        }
    },
    "SUBSCRIBE": {
        "summary": "Listen for messages published to the given channels",
        "complexity": "O(N) where N is the number of channels to subscribe to.",
        "arguments": [
            {
                "name": "channel",
                "schema": {
                    "title": "channel",
                    "type": "array",
                    "items": {
                        "title": "channel",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.0.0",
        "group": "pubsub",
        "return": {}
    },
    "SUNION": {
        "summary": "Add multiple sets",
        "complexity": "O(N) where N is the total number of elements in all given sets.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "SUNIONSTORE": {
        "summary": "Add multiple sets and store the resulting set in a key",
        "complexity": "O(N) where N is the total number of elements in all given sets.",
        "arguments": [
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.0.0",
        "group": "set",
        "return": {
            "type": "integer"
        }
    },
    "SWAPDB": {
        "summary": "Swaps two Redis databases",
        "arguments": [
            {
                "name": "index1",
                "schema": {
                    "title": "index1",
                    "type": "integer"
                }
            },
            {
                "name": "index2",
                "schema": {
                    "title": "index2",
                    "type": "integer"
                }
            }
        ],
        "since": "4.0.0",
        "group": "server",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "SYNC": {
        "summary": "Internal command used for replication",
        "since": "1.0.0",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "PSYNC": {
        "summary": "Internal command used for replication",
        "arguments": [
            {
                "name": "replicationid",
                "schema": {
                    "title": "replicationid",
                    "type": "integer"
                }
            },
            {
                "name": "offset",
                "schema": {
                    "title": "offset",
                    "type": "integer"
                }
            }
        ],
        "since": "2.8.0",
        "group": "server",
        "return": {}
    },
    "TIME": {
        "summary": "Return the current server time",
        "complexity": "O(1)",
        "since": "2.6.0",
        "group": "server",
        "arguments": [],
        "return": {
            "type": "array",
            "items": {
                "type": "number"
            }
        }
    },
    "TOUCH": {
        "summary": "Alters the last access time of a key(s). Returns the number of existing keys specified.",
        "complexity": "O(N) where N is the number of keys that will be touched.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "3.2.1",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "TTL": {
        "summary": "Get the time to live for a key",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "TYPE": {
        "summary": "Determine the type stored at key",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.0.0",
        "group": "generic",
        "return": {
            "type": "string",
            "enum": ["none", "string", "list", "set", "zset", "hash", "stream"]
        }
    },
    "UNSUBSCRIBE": {
        "summary": "Stop listening for messages posted to the given channels",
        "complexity": "O(N) where N is the number of clients already subscribed to a channel.",
        "arguments": [
            {
                "name": "channel",
                "optional": true,
                "schema": {
                    "title": "channel",
                    "type": "array",
                    "items": {
                        "title": "channel",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.0.0",
        "group": "pubsub",
        "return": {}
    },
    "UNLINK": {
        "summary": "Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.",
        "complexity": "O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "4.0.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "UNWATCH": {
        "summary": "Forget about all watched keys",
        "complexity": "O(1)",
        "since": "2.2.0",
        "group": "transactions",
        "arguments": [],
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "WAIT": {
        "summary": "Wait for the synchronous replication of all the write commands sent in the context of the current connection",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "numreplicas",
                "schema": {
                    "title": "numreplicas",
                    "type": "integer"
                }
            },
            {
                "name": "timeout",
                "schema": {
                    "title": "timeout",
                    "type": "integer"
                }
            }
        ],
        "since": "3.0.0",
        "group": "generic",
        "return": {
            "type": "integer"
        }
    },
    "WATCH": {
        "summary": "Watch the given keys to determine execution of the MULTI/EXEC block",
        "complexity": "O(1) for every key.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.2.0",
        "group": "transactions",
        "return": {
            "type": "string",
            "const": "OK"
        }
    },
    "ZADD": {
        "summary": "Add one or more members to a sorted set, or update its score if it already exists",
        "complexity": "O(log(N)) for each item added, where N is the number of elements in the sorted set.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "condition",
                "optional": true,
                "schema": {
                    "title": "condition",
                    "type": "string",
                    "enum": ["NX", "XX"]
                }
            },
            {
                "name": "comparison",
                "optional": true,
                "schema": {
                    "title": "comparison",
                    "type": "string",
                    "enum": ["GT", "LT"]
                }
            },
            {
                "name": "change",
                "optional": true,
                "schema": {
                    "title": "change",
                    "type": "string",
                    "enum": ["CH"]
                }
            },
            {
                "name": "increment",
                "optional": true,
                "schema": {
                    "title": "increment",
                    "type": "string",
                    "enum": ["INCR"]
                }
            },
            {
                "name": "score, member",
                "schema": {
                    "title": "score, member",
                    "type": "array",
                    "items": {
                        "title": "score, member",
                        "type": "array",
                        "items": [
                            {
                                "title": "score",
                                "type": "number"
                            },
                            {
                                "title": "member",
                                "type": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "since": "1.2.0",
        "group": "sorted_set",
        "return": {
            "anyOf": [
                {
                    "type": "integer"
                },
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "ZCARD": {
        "summary": "Get the number of members in a sorted set",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "1.2.0",
        "group": "sorted_set",
        "return": {
            "type": "integer"
        }
    },
    "ZCOUNT": {
        "summary": "Count the members in a sorted set with scores within the given values",
        "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "min",
                "schema": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "string",
                            "enum": ["-inf", "+inf"]
                        },
                        {
                            "type": "string",
                            "pattern": "^\\(\\d+(\\.\\d+)?$"
                        }
                    ]
                }
            },
            {
                "name": "max",
                "schema": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "string",
                            "enum": ["-inf", "+inf"]
                        },
                        {
                            "type": "string",
                            "pattern": "^\\(\\d+(\\.\\d+)?$"
                        }
                    ]
                }
            }
        ],
        "since": "2.0.0",
        "group": "sorted_set",
        "return": {
            "type": "integer"
        }
    },
    "ZDIFF": {
        "summary": "Subtract multiple sorted sets",
        "complexity": "O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.",
        "arguments": [
            {
                "name": "numkeys",
                "schema": {
                    "title": "numkeys",
                    "type": "integer"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "withscores",
                "optional": true,
                "schema": {
                    "title": "withscores",
                    "type": "string",
                    "enum": ["WITHSCORES"]
                }
            }
        ],
        "since": "6.2.0",
        "group": "sorted_set",
        "return": {
            "type": "array"
        }
    },
    "ZDIFFSTORE": {
        "summary": "Subtract multiple sorted sets and store the resulting sorted set in a new key",
        "complexity": "O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.",
        "arguments": [
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            },
            {
                "name": "numkeys",
                "schema": {
                    "title": "numkeys",
                    "type": "integer"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "6.2.0",
        "group": "sorted_set",
        "return": {
            "type": "integer"
        }
    },
    "ZINCRBY": {
        "summary": "Increment the score of a member in a sorted set",
        "complexity": "O(log(N)) where N is the number of elements in the sorted set.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "increment",
                "schema": {
                    "title": "increment",
                    "type": "integer"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "string"
                }
            }
        ],
        "since": "1.2.0",
        "group": "sorted_set",
        "return": {
            "type": "string"
        }
    },
    "ZINTER": {
        "summary": "Intersect multiple sorted sets",
        "complexity": "O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.",
        "arguments": [
            {
                "name": "numkeys",
                "schema": {
                    "title": "numkeys",
                    "type": "integer"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "WEIGHTS",
                "optional": true,
                "schema": {
                    "title": "WEIGHTS",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "enum": ["WEIGHTS"]
                        },
                        {
                            "type": "array",
                            "items": {
                                "title": "weight",
                                "type": "integer"
                            }
                        }
                    ]
                }
            },
            {
                "name": "AGGREGATE",
                "optional": true,
                "schema": {
                    "title": "AGGREGATE",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "AGGREGATE"
                        },
                        {
                            "title": "aggregate",
                            "type": "string",
                            "enum": ["SUM", "MIN", "MAX"]
                        }
                    ]
                }
            },
            {
                "name": "withscores",
                "optional": true,
                "schema": {
                    "title": "withscores",
                    "type": "string",
                    "enum": ["WITHSCORES"]
                }
            }
        ],
        "since": "6.2.0",
        "group": "sorted_set",
        "return": {
            "type": "array"
        }
    },
    "ZINTERSTORE": {
        "summary": "Intersect multiple sorted sets and store the resulting sorted set in a new key",
        "complexity": "O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.",
        "arguments": [
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            },
            {
                "name": "numkeys",
                "schema": {
                    "title": "numkeys",
                    "type": "integer"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "WEIGHTS",
                "optional": true,
                "schema": {
                    "title": "WEIGHTS",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "enum": ["WEIGHTS"]
                        },
                        {
                            "type": "array",
                            "items": {
                                "title": "weight",
                                "type": "integer"
                            }
                        }
                    ]
                }
            },
            {
                "name": "AGGREGATE",
                "optional": true,
                "schema": {
                    "title": "AGGREGATE",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "AGGREGATE"
                        },
                        {
                            "title": "aggregate",
                            "type": "string",
                            "enum": ["SUM", "MIN", "MAX"]
                        }
                    ]
                }
            }
        ],
        "since": "2.0.0",
        "group": "sorted_set",
        "return": {
            "type": "integer"
        }
    },
    "ZLEXCOUNT": {
        "summary": "Count the number of members in a sorted set between a given lexicographical range",
        "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "min",
                "schema": {
                    "title": "min",
                    "type": "string"
                }
            },
            {
                "name": "max",
                "schema": {
                    "title": "max",
                    "type": "string"
                }
            }
        ],
        "since": "2.8.9",
        "group": "sorted_set",
        "return": {
            "type": "integer"
        }
    },
    "ZPOPMAX": {
        "summary": "Remove and return members with the highest scores in a sorted set",
        "complexity": "O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "count",
                "optional": true,
                "schema": {
                    "title": "count",
                    "type": "integer"
                }
            }
        ],
        "since": "5.0.0",
        "group": "sorted_set",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "ZPOPMIN": {
        "summary": "Remove and return members with the lowest scores in a sorted set",
        "complexity": "O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "count",
                "optional": true,
                "schema": {
                    "title": "count",
                    "type": "integer"
                }
            }
        ],
        "since": "5.0.0",
        "group": "sorted_set",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "ZRANGE": {
        "summary": "Return a range of members in a sorted set, by index",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "start",
                "schema": {
                    "title": "start",
                    "type": "integer"
                }
            },
            {
                "name": "stop",
                "schema": {
                    "title": "stop",
                    "type": "integer"
                }
            },
            {
                "name": "withscores",
                "optional": true,
                "schema": {
                    "title": "withscores",
                    "type": "string",
                    "enum": ["WITHSCORES"]
                }
            }
        ],
        "since": "1.2.0",
        "group": "sorted_set",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "ZRANGEBYLEX": {
        "summary": "Return a range of members in a sorted set, by lexicographical range",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "min",
                "schema": {
                    "title": "min",
                    "type": "string"
                }
            },
            {
                "name": "max",
                "schema": {
                    "title": "max",
                    "type": "string"
                }
            },
            {
                "name": "LIMIT",
                "optional": true,
                "schema": {
                    "title": "LIMIT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "LIMIT"
                        },
                        {
                            "title": "offset, count",
                            "type": "array",
                            "items": [
                                {
                                    "title": "offset",
                                    "type": "integer"
                                },
                                {
                                    "title": "count",
                                    "type": "integer"
                                }
                            ]
                        }
                    ]
                }
            }
        ],
        "since": "2.8.9",
        "group": "sorted_set",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "ZREVRANGEBYLEX": {
        "summary": "Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "max",
                "schema": {
                    "title": "max",
                    "type": "string"
                }
            },
            {
                "name": "min",
                "schema": {
                    "title": "min",
                    "type": "string"
                }
            },
            {
                "name": "LIMIT",
                "optional": true,
                "schema": {
                    "title": "LIMIT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "LIMIT"
                        },
                        {
                            "title": "offset, count",
                            "type": "array",
                            "items": [
                                {
                                    "title": "offset",
                                    "type": "integer"
                                },
                                {
                                    "title": "count",
                                    "type": "integer"
                                }
                            ]
                        }
                    ]
                }
            }
        ],
        "since": "2.8.9",
        "group": "sorted_set",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "ZRANGEBYSCORE": {
        "summary": "Return a range of members in a sorted set, by score",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "min",
                "schema": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "string",
                            "enum": ["-inf", "+inf"]
                        },
                        {
                            "type": "string",
                            "pattern": "^\\(\\d+(\\.\\d+)?$"
                        }
                    ]
                }
            },
            {
                "name": "max",
                "schema": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "string",
                            "enum": ["-inf", "+inf"]
                        },
                        {
                            "type": "string",
                            "pattern": "^\\(\\d+(\\.\\d+)?$"
                        }
                    ]
                }
            },
            {
                "name": "withscores",
                "optional": true,
                "schema": {
                    "title": "withscores",
                    "type": "string",
                    "enum": ["WITHSCORES"]
                }
            },
            {
                "name": "LIMIT",
                "optional": true,
                "schema": {
                    "title": "LIMIT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "LIMIT"
                        },
                        {
                            "title": "offset, count",
                            "type": "array",
                            "items": [
                                {
                                    "title": "offset",
                                    "type": "integer"
                                },
                                {
                                    "title": "count",
                                    "type": "integer"
                                }
                            ]
                        }
                    ]
                }
            }
        ],
        "since": "1.0.5",
        "group": "sorted_set",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "ZRANK": {
        "summary": "Determine the index of a member in a sorted set",
        "complexity": "O(log(N))",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "sorted_set",
        "return": {
            "anyOf": [
                {
                    "type": "integer"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "ZREM": {
        "summary": "Remove one or more members from a sorted set",
        "complexity": "O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "array",
                    "items": {
                        "title": "member",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "1.2.0",
        "group": "sorted_set",
        "return": {
            "type": "integer"
        }
    },
    "ZREMRANGEBYLEX": {
        "summary": "Remove all members in a sorted set between the given lexicographical range",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "min",
                "schema": {
                    "title": "min",
                    "type": "string"
                }
            },
            {
                "name": "max",
                "schema": {
                    "title": "max",
                    "type": "string"
                }
            }
        ],
        "since": "2.8.9",
        "group": "sorted_set",
        "return": {
            "type": "integer"
        }
    },
    "ZREMRANGEBYRANK": {
        "summary": "Remove all members in a sorted set within the given indexes",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "start",
                "schema": {
                    "title": "start",
                    "type": "integer"
                }
            },
            {
                "name": "stop",
                "schema": {
                    "title": "stop",
                    "type": "integer"
                }
            }
        ],
        "since": "2.0.0",
        "group": "sorted_set",
        "return": {
            "type": "integer"
        }
    },
    "ZREMRANGEBYSCORE": {
        "summary": "Remove all members in a sorted set within the given scores",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "min",
                "schema": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "string",
                            "enum": ["-inf", "+inf"]
                        },
                        {
                            "type": "string",
                            "pattern": "^\\(\\d+(\\.\\d+)?$"
                        }
                    ]
                }
            },
            {
                "name": "max",
                "schema": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "string",
                            "enum": ["-inf", "+inf"]
                        },
                        {
                            "type": "string",
                            "pattern": "^\\(\\d+(\\.\\d+)?$"
                        }
                    ]
                }
            }
        ],
        "since": "1.2.0",
        "group": "sorted_set",
        "return": {
            "type": "integer"
        }
    },
    "ZREVRANGE": {
        "summary": "Return a range of members in a sorted set, by index, with scores ordered from high to low",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "start",
                "schema": {
                    "title": "start",
                    "type": "integer"
                }
            },
            {
                "name": "stop",
                "schema": {
                    "title": "stop",
                    "type": "integer"
                }
            },
            {
                "name": "withscores",
                "optional": true,
                "schema": {
                    "title": "withscores",
                    "type": "string",
                    "enum": ["WITHSCORES"]
                }
            }
        ],
        "since": "1.2.0",
        "group": "sorted_set",
        "return": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "ZREVRANGEBYSCORE": {
        "summary": "Return a range of members in a sorted set, by score, with scores ordered from high to low",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "max",
                "schema": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "string",
                            "enum": ["-inf", "+inf"]
                        },
                        {
                            "type": "string",
                            "pattern": "^\\(\\d+(\\.\\d+)?$"
                        }
                    ]
                }
            },
            {
                "name": "min",
                "schema": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "string",
                            "enum": ["-inf", "+inf"]
                        },
                        {
                            "type": "string",
                            "pattern": "^\\(\\d+(\\.\\d+)?$"
                        }
                    ]
                }
            },
            {
                "name": "withscores",
                "optional": true,
                "schema": {
                    "title": "withscores",
                    "type": "string",
                    "enum": ["WITHSCORES"]
                }
            },
            {
                "name": "LIMIT",
                "optional": true,
                "schema": {
                    "title": "LIMIT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "LIMIT"
                        },
                        {
                            "title": "offset, count",
                            "type": "array",
                            "items": [
                                {
                                    "title": "offset",
                                    "type": "integer"
                                },
                                {
                                    "title": "count",
                                    "type": "integer"
                                }
                            ]
                        }
                    ]
                }
            }
        ],
        "since": "2.2.0",
        "group": "sorted_set",
        "return": {
            "type": "array"
        }
    },
    "ZREVRANK": {
        "summary": "Determine the index of a member in a sorted set, with scores ordered from high to low",
        "complexity": "O(log(N))",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "string"
                }
            }
        ],
        "since": "2.0.0",
        "group": "sorted_set",
        "return": {
            "anyOf": [
                {
                    "type": "integer"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "ZSCORE": {
        "summary": "Get the score associated with the given member in a sorted set",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "string"
                }
            }
        ],
        "since": "1.2.0",
        "group": "sorted_set",
        "return": {
            "type": "string"
        }
    },
    "ZUNION": {
        "summary": "Add multiple sorted sets",
        "complexity": "O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.",
        "arguments": [
            {
                "name": "numkeys",
                "schema": {
                    "title": "numkeys",
                    "type": "integer"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "WEIGHTS",
                "optional": true,
                "schema": {
                    "title": "WEIGHTS",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "enum": ["WEIGHTS"]
                        },
                        {
                            "type": "array",
                            "items": {
                                "title": "weight",
                                "type": "integer"
                            }
                        }
                    ]
                }
            },
            {
                "name": "AGGREGATE",
                "optional": true,
                "schema": {
                    "title": "AGGREGATE",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "AGGREGATE"
                        },
                        {
                            "title": "aggregate",
                            "type": "string",
                            "enum": ["SUM", "MIN", "MAX"]
                        }
                    ]
                }
            },
            {
                "name": "withscores",
                "optional": true,
                "schema": {
                    "title": "withscores",
                    "type": "string",
                    "enum": ["WITHSCORES"]
                }
            }
        ],
        "since": "6.2.0",
        "group": "sorted_set",
        "return": {
            "type": "array"
        }
    },
    "ZMSCORE": {
        "summary": "Get the score associated with the given members in a sorted set",
        "complexity": "O(N) where N is the number of members being requested.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "member",
                "schema": {
                    "title": "member",
                    "type": "array",
                    "items": {
                        "title": "member",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "6.2.0",
        "group": "sorted_set",
        "return": {
            "anyOf": [
                {
                    "type": "array"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "ZUNIONSTORE": {
        "summary": "Add multiple sorted sets and store the resulting sorted set in a new key",
        "complexity": "O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.",
        "arguments": [
            {
                "name": "destination",
                "schema": {
                    "title": "destination",
                    "type": "string"
                }
            },
            {
                "name": "numkeys",
                "schema": {
                    "title": "numkeys",
                    "type": "integer"
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "WEIGHTS",
                "optional": true,
                "schema": {
                    "title": "WEIGHTS",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "enum": ["WEIGHTS"]
                        },
                        {
                            "type": "array",
                            "items": {
                                "title": "weight",
                                "type": "integer"
                            }
                        }
                    ]
                }
            },
            {
                "name": "AGGREGATE",
                "optional": true,
                "schema": {
                    "title": "AGGREGATE",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "AGGREGATE"
                        },
                        {
                            "title": "aggregate",
                            "type": "string",
                            "enum": ["SUM", "MIN", "MAX"]
                        }
                    ]
                }
            }
        ],
        "since": "2.0.0",
        "group": "sorted_set",
        "return": {
            "type": "integer"
        }
    },
    "SCAN": {
        "summary": "Incrementally iterate the keys space",
        "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.",
        "arguments": [
            {
                "name": "cursor",
                "schema": {
                    "title": "cursor",
                    "type": "integer"
                }
            },
            {
                "name": "MATCH",
                "optional": true,
                "schema": {
                    "title": "MATCH",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "MATCH"
                        },
                        {
                            "title": "pattern",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "COUNT",
                "optional": true,
                "schema": {
                    "title": "COUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "COUNT"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "TYPE",
                "optional": true,
                "schema": {
                    "title": "TYPE",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "TYPE"
                        },
                        {
                            "title": "type",
                            "type": "string"
                        }
                    ]
                }
            }
        ],
        "since": "2.8.0",
        "group": "generic",
        "return": {
            "type": "array",
            "items": [
                {
                    "title": "cursor",
                    "type": "string"
                },
                {
                    "title": "values",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        }
    },
    "SSCAN": {
        "summary": "Incrementally iterate Set elements",
        "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "cursor",
                "schema": {
                    "title": "cursor",
                    "type": "integer"
                }
            },
            {
                "name": "MATCH",
                "optional": true,
                "schema": {
                    "title": "MATCH",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "MATCH"
                        },
                        {
                            "title": "pattern",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "COUNT",
                "optional": true,
                "schema": {
                    "title": "COUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "COUNT"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            }
        ],
        "since": "2.8.0",
        "group": "set",
        "return": {
            "type": "array",
            "items": [
                {
                    "title": "cursor",
                    "type": "string"
                },
                {
                    "title": "values",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        }
    },
    "HSCAN": {
        "summary": "Incrementally iterate hash fields and associated values",
        "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "cursor",
                "schema": {
                    "title": "cursor",
                    "type": "integer"
                }
            },
            {
                "name": "MATCH",
                "optional": true,
                "schema": {
                    "title": "MATCH",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "MATCH"
                        },
                        {
                            "title": "pattern",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "COUNT",
                "optional": true,
                "schema": {
                    "title": "COUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "COUNT"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            }
        ],
        "since": "2.8.0",
        "group": "hash",
        "return": {
            "type": "array",
            "items": [
                {
                    "title": "cursor",
                    "type": "string"
                },
                {
                    "title": "values",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        }
    },
    "ZSCAN": {
        "summary": "Incrementally iterate sorted sets elements and associated scores",
        "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "cursor",
                "schema": {
                    "title": "cursor",
                    "type": "integer"
                }
            },
            {
                "name": "MATCH",
                "optional": true,
                "schema": {
                    "title": "MATCH",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "MATCH"
                        },
                        {
                            "title": "pattern",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "COUNT",
                "optional": true,
                "schema": {
                    "title": "COUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "COUNT"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            }
        ],
        "since": "2.8.0",
        "group": "sorted_set",
        "return": {
            "type": "array",
            "items": [
                {
                    "title": "cursor",
                    "type": "string"
                },
                {
                    "title": "values",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        }
    },
    "XINFO": {
        "summary": "Get information on streams and consumer groups",
        "complexity": "O(N) with N being the number of returned items for the subcommands CONSUMERS and GROUPS. The STREAM subcommand is O(log N) with N being the number of items in the stream.",
        "arguments": [
            {
                "name": "CONSUMERS",
                "optional": true,
                "schema": {
                    "title": "CONSUMERS",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "CONSUMERS"
                        },
                        {
                            "title": "key, groupname",
                            "type": "array",
                            "items": [
                                {
                                    "title": "key",
                                    "type": "string"
                                },
                                {
                                    "title": "groupname",
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "GROUPS",
                "optional": true,
                "schema": {
                    "title": "GROUPS",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "GROUPS"
                        },
                        {
                            "title": "key",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "STREAM",
                "optional": true,
                "schema": {
                    "title": "STREAM",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "STREAM"
                        },
                        {
                            "title": "key",
                            "type": "string"
                        }
                    ]
                }
            },
            {
                "name": "help",
                "optional": true,
                "schema": {
                    "title": "help",
                    "type": "string",
                    "enum": ["HELP"]
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {}
    },
    "XADD": {
        "summary": "Appends a new entry to a stream",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "maxlen",
                "optional": true,
                "schema": {
                    "title": "maxlen",
                    "type": "array",
                    "items": [
                        {
                            "title": "MAXLEN",
                            "type": "string",
                            "const": "MAXLEN"
                        },
                        {
                            "title": "operator",
                            "anyOf": [
                                {
                                    "title": "length",
                                    "type": "integer"
                                },
                                {
                                    "type": "array",
                                    "items": [
                                        {
                                            "title": "=, or ~",
                                            "type": "string",
                                            "enum": ["=", "~"]
                                        },
                                        {
                                            "title": "length",
                                            "type": "integer"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "NOMKSTREAM",
                "optional": true,
                "schema": {
                    "title": "NOMKSTREAM",
                    "type": "string",
                    "const": "NOMKSTREAM"
                }
            },
            {
                "name": "*, or ID",
                "schema": {
                    "title": "*, or ID",
                    "type": "string",
                    "enum": ["*", "ID"]
                }
            },
            {
                "name": "field, value",
                "schema": {
                    "title": "field, value",
                    "type": "array",
                    "items": {
                        "title": "field, value",
                        "type": "array",
                        "items": [
                            {
                                "title": "field",
                                "type": "string"
                            },
                            {
                                "title": "value",
                                "type": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        }
    },
    "XTRIM": {
        "summary": "Trims the stream to (approximately if '~' is passed) a certain size",
        "complexity": "O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "strategy",
                "schema": {
                    "title": "strategy",
                    "type": "string",
                    "enum": ["MAXLEN"]
                }
            },
            {
                "name": "operator",
                "schema": {
                    "title": "operator",
                    "anyOf": [
                        {
                            "title": "length",
                            "type": "integer"
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "title": "=, or ~",
                                    "type": "string",
                                    "enum": ["=", "~"]
                                },
                                {
                                    "title": "length",
                                    "type": "integer"
                                }
                            ]
                        }
                    ]
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {
            "type": "integer"
        }
    },
    "XDEL": {
        "summary": "Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist.",
        "complexity": "O(1) for each single item to delete in the stream, regardless of the stream size.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "ID",
                "schema": {
                    "title": "ID",
                    "type": "array",
                    "items": {
                        "title": "ID",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {
            "type": "integer"
        }
    },
    "XRANGE": {
        "summary": "Return a range of elements in a stream, with IDs matching the specified IDs interval",
        "complexity": "O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "start",
                "schema": {
                    "title": "start",
                    "type": "string"
                }
            },
            {
                "name": "end",
                "schema": {
                    "title": "end",
                    "type": "string"
                }
            },
            {
                "name": "COUNT",
                "optional": true,
                "schema": {
                    "title": "COUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "COUNT"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {
            "type": "array"
        }
    },
    "XREVRANGE": {
        "summary": "Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE",
        "complexity": "O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "end",
                "schema": {
                    "title": "end",
                    "type": "string"
                }
            },
            {
                "name": "start",
                "schema": {
                    "title": "start",
                    "type": "string"
                }
            },
            {
                "name": "COUNT",
                "optional": true,
                "schema": {
                    "title": "COUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "COUNT"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {
            "type": "array"
        }
    },
    "XLEN": {
        "summary": "Return the number of entries in a stream",
        "complexity": "O(1)",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {
            "type": "integer"
        }
    },
    "XREAD": {
        "summary": "Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.",
        "complexity": "For each stream mentioned: O(N) with N being the number of elements being returned, it means that XREAD-ing with a fixed COUNT is O(1). Note that when the BLOCK option is used, XADD will pay O(M) time in order to serve the M clients blocked on the stream getting new data.",
        "arguments": [
            {
                "name": "COUNT",
                "optional": true,
                "schema": {
                    "title": "COUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "COUNT"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "BLOCK",
                "optional": true,
                "schema": {
                    "title": "BLOCK",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "BLOCK"
                        },
                        {
                            "title": "milliseconds",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "streams",
                "schema": {
                    "title": "streams",
                    "type": "string",
                    "enum": ["STREAMS"]
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "ID",
                "schema": {
                    "title": "ID",
                    "type": "array",
                    "items": {
                        "title": "ID",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {
            "type": "array"
        }
    },
    "XGROUP": {
        "summary": "Create, destroy, and manage consumer groups.",
        "complexity": "O(1) for all the subcommands, with the exception of the DESTROY subcommand which takes an additional O(M) time in order to delete the M entries inside the consumer group pending entries list (PEL).",
        "arguments": [
            {
                "name": "create",
                "optional": true,
                "schema": {
                    "title": "create",
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "title": "CREATE",
                                    "type": "array",
                                    "items": [
                                        {
                                            "type": "string",
                                            "const": "CREATE"
                                        },
                                        {
                                            "title": "key, groupname",
                                            "type": "array",
                                            "items": [
                                                {
                                                    "title": "key",
                                                    "type": "string"
                                                },
                                                {
                                                    "title": "groupname",
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "title": "id",
                                    "type": "string",
                                    "enum": ["ID", "$"]
                                }
                            ]
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "title": "CREATE",
                                    "type": "array",
                                    "items": [
                                        {
                                            "type": "string",
                                            "const": "CREATE"
                                        },
                                        {
                                            "title": "key, groupname",
                                            "type": "array",
                                            "items": [
                                                {
                                                    "title": "key",
                                                    "type": "string"
                                                },
                                                {
                                                    "title": "groupname",
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "title": "id",
                                    "type": "string",
                                    "enum": ["ID", "$"]
                                },
                                {
                                    "title": "MKSTREAM",
                                    "type": "string",
                                    "const": "MKSTREAM"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "setid",
                "optional": true,
                "schema": {
                    "title": "setid",
                    "type": "array",
                    "items": [
                        {
                            "title": "SETID",
                            "type": "array",
                            "items": [
                                {
                                    "type": "string",
                                    "const": "SETID"
                                },
                                {
                                    "title": "key, groupname",
                                    "type": "array",
                                    "items": [
                                        {
                                            "title": "key",
                                            "type": "string"
                                        },
                                        {
                                            "title": "groupname",
                                            "type": "string"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "title": "id",
                            "type": "string",
                            "enum": ["ID", "$"]
                        }
                    ]
                }
            },
            {
                "name": "DESTROY",
                "optional": true,
                "schema": {
                    "title": "DESTROY",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "DESTROY"
                        },
                        {
                            "title": "key, groupname",
                            "type": "array",
                            "items": [
                                {
                                    "title": "key",
                                    "type": "string"
                                },
                                {
                                    "title": "groupname",
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "CREATECONSUMER",
                "optional": true,
                "schema": {
                    "title": "CREATECONSUMER",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "CREATECONSUMER"
                        },
                        {
                            "title": "key, groupname, consumername",
                            "type": "array",
                            "items": [
                                {
                                    "title": "key",
                                    "type": "string"
                                },
                                {
                                    "title": "groupname",
                                    "type": "string"
                                },
                                {
                                    "title": "consumername",
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "DELCONSUMER",
                "optional": true,
                "schema": {
                    "title": "DELCONSUMER",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "DELCONSUMER"
                        },
                        {
                            "title": "key, groupname, consumername",
                            "type": "array",
                            "items": [
                                {
                                    "title": "key",
                                    "type": "string"
                                },
                                {
                                    "title": "groupname",
                                    "type": "string"
                                },
                                {
                                    "title": "consumername",
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {}
    },
    "XREADGROUP": {
        "summary": "Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.",
        "complexity": "For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.",
        "arguments": [
            {
                "name": "GROUP",
                "schema": {
                    "title": "GROUP",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "GROUP"
                        },
                        {
                            "title": "group, consumer",
                            "type": "array",
                            "items": [
                                {
                                    "title": "group",
                                    "type": "string"
                                },
                                {
                                    "title": "consumer",
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "COUNT",
                "optional": true,
                "schema": {
                    "title": "COUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "COUNT"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "BLOCK",
                "optional": true,
                "schema": {
                    "title": "BLOCK",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "BLOCK"
                        },
                        {
                            "title": "milliseconds",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "noack",
                "optional": true,
                "schema": {
                    "title": "noack",
                    "type": "string",
                    "enum": ["NOACK"]
                }
            },
            {
                "name": "streams",
                "schema": {
                    "title": "streams",
                    "type": "string",
                    "enum": ["STREAMS"]
                }
            },
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "array",
                    "items": {
                        "title": "key",
                        "type": "string"
                    }
                }
            },
            {
                "name": "ID",
                "schema": {
                    "title": "ID",
                    "type": "array",
                    "items": {
                        "title": "ID",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {}
    },
    "XACK": {
        "summary": "Marks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer group. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were actually able to resolve in the PEL.",
        "complexity": "O(1) for each message ID processed.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "group",
                "schema": {
                    "title": "group",
                    "type": "string"
                }
            },
            {
                "name": "ID",
                "schema": {
                    "title": "ID",
                    "type": "array",
                    "items": {
                        "title": "ID",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {
            "type": "integer"
        }
    },
    "XCLAIM": {
        "summary": "Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.",
        "complexity": "O(log N) with N being the number of messages in the PEL of the consumer group.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "group",
                "schema": {
                    "title": "group",
                    "type": "string"
                }
            },
            {
                "name": "consumer",
                "schema": {
                    "title": "consumer",
                    "type": "string"
                }
            },
            {
                "name": "min-idle-time",
                "schema": {
                    "title": "min-idle-time",
                    "type": "string"
                }
            },
            {
                "name": "ID",
                "schema": {
                    "title": "ID",
                    "type": "array",
                    "items": {
                        "title": "ID",
                        "type": "string"
                    }
                }
            },
            {
                "name": "IDLE",
                "optional": true,
                "schema": {
                    "title": "IDLE",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "IDLE"
                        },
                        {
                            "title": "ms",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "TIME",
                "optional": true,
                "schema": {
                    "title": "TIME",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "TIME"
                        },
                        {
                            "title": "ms-unix-time",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "RETRYCOUNT",
                "optional": true,
                "schema": {
                    "title": "RETRYCOUNT",
                    "type": "array",
                    "items": [
                        {
                            "type": "string",
                            "const": "RETRYCOUNT"
                        },
                        {
                            "title": "count",
                            "type": "integer"
                        }
                    ]
                }
            },
            {
                "name": "force",
                "optional": true,
                "schema": {
                    "title": "force"
                }
            },
            {
                "name": "justid",
                "optional": true,
                "schema": {
                    "title": "justid"
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {
            "type": "array"
        }
    },
    "XPENDING": {
        "summary": "Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.",
        "complexity": "O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.",
        "arguments": [
            {
                "name": "key",
                "schema": {
                    "title": "key",
                    "type": "string"
                }
            },
            {
                "name": "group",
                "schema": {
                    "title": "group",
                    "type": "string"
                }
            },
            {
                "name": "filters",
                "optional": true,
                "schema": {
                    "title": "filters",
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "title": "start",
                                    "type": "string"
                                },
                                {
                                    "title": "end",
                                    "type": "string"
                                },
                                {
                                    "title": "count",
                                    "type": "integer"
                                }
                            ]
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "title": "IDLE",
                                    "type": "array",
                                    "items": [
                                        {
                                            "type": "string",
                                            "const": "IDLE"
                                        },
                                        {
                                            "title": "min-idle-time",
                                            "type": "integer"
                                        }
                                    ]
                                },
                                {
                                    "title": "start",
                                    "type": "string"
                                },
                                {
                                    "title": "end",
                                    "type": "string"
                                },
                                {
                                    "title": "count",
                                    "type": "integer"
                                }
                            ]
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "title": "start",
                                    "type": "string"
                                },
                                {
                                    "title": "end",
                                    "type": "string"
                                },
                                {
                                    "title": "count",
                                    "type": "integer"
                                },
                                {
                                    "title": "consumer",
                                    "type": "string"
                                }
                            ]
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "title": "IDLE",
                                    "type": "array",
                                    "items": [
                                        {
                                            "type": "string",
                                            "const": "IDLE"
                                        },
                                        {
                                            "title": "min-idle-time",
                                            "type": "integer"
                                        }
                                    ]
                                },
                                {
                                    "title": "start",
                                    "type": "string"
                                },
                                {
                                    "title": "end",
                                    "type": "string"
                                },
                                {
                                    "title": "count",
                                    "type": "integer"
                                },
                                {
                                    "title": "consumer",
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                }
            }
        ],
        "since": "5.0.0",
        "group": "stream",
        "return": {
            "type": "array"
        }
    },
    "LATENCY DOCTOR": {
        "summary": "Return a human readable latency analysis report.",
        "since": "2.8.13",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "LATENCY GRAPH": {
        "summary": "Return a latency graph for the event.",
        "arguments": [
            {
                "name": "event",
                "schema": {
                    "title": "event",
                    "type": "string"
                }
            }
        ],
        "since": "2.8.13",
        "group": "server",
        "return": {}
    },
    "LATENCY HISTORY": {
        "summary": "Return timestamp-latency samples for the event.",
        "arguments": [
            {
                "name": "event",
                "schema": {
                    "title": "event",
                    "type": "string"
                }
            }
        ],
        "since": "2.8.13",
        "group": "server",
        "return": {}
    },
    "LATENCY LATEST": {
        "summary": "Return the latest latency samples for all events.",
        "since": "2.8.13",
        "group": "server",
        "arguments": [],
        "return": {}
    },
    "LATENCY RESET": {
        "summary": "Reset latency data for one or more events.",
        "arguments": [
            {
                "name": "event",
                "optional": true,
                "schema": {
                    "title": "event",
                    "type": "array",
                    "items": {
                        "title": "event",
                        "type": "string"
                    }
                }
            }
        ],
        "since": "2.8.13",
        "group": "server",
        "return": {}
    },
    "LATENCY HELP": {
        "summary": "Show helpful text about the different subcommands.",
        "since": "2.8.13",
        "group": "server",
        "arguments": [],
        "return": {}
    }
}
